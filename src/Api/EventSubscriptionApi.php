<?php
/**
 * EventSubscriptionApi
 * PHP version 7.2
 *
 * @category Class
 * @package  StrehleDe\CamundaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StrehleDe\CamundaClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use StrehleDe\CamundaClient\ApiException;
use StrehleDe\CamundaClient\Configuration;
use StrehleDe\CamundaClient\HeaderSelector;
use StrehleDe\CamundaClient\ObjectSerializer;

/**
 * EventSubscriptionApi Class Doc Comment
 *
 * @category Class
 * @package  StrehleDe\CamundaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EventSubscriptionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getEventSubscriptions
     *
     * @param  string $event_subscription_id Only select subscription with the given id. (optional)
     * @param  string $event_name Only select subscriptions for events with the given name. (optional)
     * @param  string $event_type Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)
     * @param  string $execution_id Only select subscriptions that belong to an execution with the given id. (optional)
     * @param  string $process_instance_id Only select subscriptions that belong to a process instance with the given id. (optional)
     * @param  string $activity_id Only select subscriptions that belong to an activity with the given id. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_event_subscriptions_without_tenant_id Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\EventSubscriptionDto[]|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function getEventSubscriptions($event_subscription_id = null, $event_name = null, $event_type = null, $execution_id = null, $process_instance_id = null, $activity_id = null, $tenant_id_in = null, $without_tenant_id = null, $include_event_subscriptions_without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        list($response) = $this->getEventSubscriptionsWithHttpInfo($event_subscription_id, $event_name, $event_type, $execution_id, $process_instance_id, $activity_id, $tenant_id_in, $without_tenant_id, $include_event_subscriptions_without_tenant_id, $sort_by, $sort_order, $first_result, $max_results);
        return $response;
    }

    /**
     * Operation getEventSubscriptionsWithHttpInfo
     *
     * @param  string $event_subscription_id Only select subscription with the given id. (optional)
     * @param  string $event_name Only select subscriptions for events with the given name. (optional)
     * @param  string $event_type Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)
     * @param  string $execution_id Only select subscriptions that belong to an execution with the given id. (optional)
     * @param  string $process_instance_id Only select subscriptions that belong to a process instance with the given id. (optional)
     * @param  string $activity_id Only select subscriptions that belong to an activity with the given id. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_event_subscriptions_without_tenant_id Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\EventSubscriptionDto[]|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventSubscriptionsWithHttpInfo($event_subscription_id = null, $event_name = null, $event_type = null, $execution_id = null, $process_instance_id = null, $activity_id = null, $tenant_id_in = null, $without_tenant_id = null, $include_event_subscriptions_without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $request = $this->getEventSubscriptionsRequest($event_subscription_id, $event_name, $event_type, $execution_id, $process_instance_id, $activity_id, $tenant_id_in, $without_tenant_id, $include_event_subscriptions_without_tenant_id, $sort_by, $sort_order, $first_result, $max_results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\EventSubscriptionDto[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\EventSubscriptionDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\EventSubscriptionDto[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\EventSubscriptionDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventSubscriptionsAsync
     *
     * 
     *
     * @param  string $event_subscription_id Only select subscription with the given id. (optional)
     * @param  string $event_name Only select subscriptions for events with the given name. (optional)
     * @param  string $event_type Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)
     * @param  string $execution_id Only select subscriptions that belong to an execution with the given id. (optional)
     * @param  string $process_instance_id Only select subscriptions that belong to a process instance with the given id. (optional)
     * @param  string $activity_id Only select subscriptions that belong to an activity with the given id. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_event_subscriptions_without_tenant_id Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventSubscriptionsAsync($event_subscription_id = null, $event_name = null, $event_type = null, $execution_id = null, $process_instance_id = null, $activity_id = null, $tenant_id_in = null, $without_tenant_id = null, $include_event_subscriptions_without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        return $this->getEventSubscriptionsAsyncWithHttpInfo($event_subscription_id, $event_name, $event_type, $execution_id, $process_instance_id, $activity_id, $tenant_id_in, $without_tenant_id, $include_event_subscriptions_without_tenant_id, $sort_by, $sort_order, $first_result, $max_results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventSubscriptionsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_subscription_id Only select subscription with the given id. (optional)
     * @param  string $event_name Only select subscriptions for events with the given name. (optional)
     * @param  string $event_type Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)
     * @param  string $execution_id Only select subscriptions that belong to an execution with the given id. (optional)
     * @param  string $process_instance_id Only select subscriptions that belong to a process instance with the given id. (optional)
     * @param  string $activity_id Only select subscriptions that belong to an activity with the given id. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_event_subscriptions_without_tenant_id Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventSubscriptionsAsyncWithHttpInfo($event_subscription_id = null, $event_name = null, $event_type = null, $execution_id = null, $process_instance_id = null, $activity_id = null, $tenant_id_in = null, $without_tenant_id = null, $include_event_subscriptions_without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\EventSubscriptionDto[]';
        $request = $this->getEventSubscriptionsRequest($event_subscription_id, $event_name, $event_type, $execution_id, $process_instance_id, $activity_id, $tenant_id_in, $without_tenant_id, $include_event_subscriptions_without_tenant_id, $sort_by, $sort_order, $first_result, $max_results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventSubscriptions'
     *
     * @param  string $event_subscription_id Only select subscription with the given id. (optional)
     * @param  string $event_name Only select subscriptions for events with the given name. (optional)
     * @param  string $event_type Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)
     * @param  string $execution_id Only select subscriptions that belong to an execution with the given id. (optional)
     * @param  string $process_instance_id Only select subscriptions that belong to a process instance with the given id. (optional)
     * @param  string $activity_id Only select subscriptions that belong to an activity with the given id. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_event_subscriptions_without_tenant_id Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventSubscriptionsRequest($event_subscription_id = null, $event_name = null, $event_type = null, $execution_id = null, $process_instance_id = null, $activity_id = null, $tenant_id_in = null, $without_tenant_id = null, $include_event_subscriptions_without_tenant_id = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {

        $resourcePath = '/event-subscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($event_subscription_id !== null) {
            if('form' === 'form' && is_array($event_subscription_id)) {
                foreach($event_subscription_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventSubscriptionId'] = $event_subscription_id;
            }
        }
        // query params
        if ($event_name !== null) {
            if('form' === 'form' && is_array($event_name)) {
                foreach($event_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventName'] = $event_name;
            }
        }
        // query params
        if ($event_type !== null) {
            if('form' === 'form' && is_array($event_type)) {
                foreach($event_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventType'] = $event_type;
            }
        }
        // query params
        if ($execution_id !== null) {
            if('form' === 'form' && is_array($execution_id)) {
                foreach($execution_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executionId'] = $execution_id;
            }
        }
        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($activity_id !== null) {
            if('form' === 'form' && is_array($activity_id)) {
                foreach($activity_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityId'] = $activity_id;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($include_event_subscriptions_without_tenant_id !== null) {
            if('form' === 'form' && is_array($include_event_subscriptions_without_tenant_id)) {
                foreach($include_event_subscriptions_without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeEventSubscriptionsWithoutTenantId'] = $include_event_subscriptions_without_tenant_id;
            }
        }
        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($sort_order !== null) {
            if('form' === 'form' && is_array($sort_order)) {
                foreach($sort_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortOrder'] = $sort_order;
            }
        }
        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEventSubscriptionsCount
     *
     * @param  string $event_subscription_id Only select subscription with the given id. (optional)
     * @param  string $event_name Only select subscriptions for events with the given name. (optional)
     * @param  string $event_type Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)
     * @param  string $execution_id Only select subscriptions that belong to an execution with the given id. (optional)
     * @param  string $process_instance_id Only select subscriptions that belong to a process instance with the given id. (optional)
     * @param  string $activity_id Only select subscriptions that belong to an activity with the given id. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_event_subscriptions_without_tenant_id Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\CountResultDto|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function getEventSubscriptionsCount($event_subscription_id = null, $event_name = null, $event_type = null, $execution_id = null, $process_instance_id = null, $activity_id = null, $tenant_id_in = null, $without_tenant_id = null, $include_event_subscriptions_without_tenant_id = null)
    {
        list($response) = $this->getEventSubscriptionsCountWithHttpInfo($event_subscription_id, $event_name, $event_type, $execution_id, $process_instance_id, $activity_id, $tenant_id_in, $without_tenant_id, $include_event_subscriptions_without_tenant_id);
        return $response;
    }

    /**
     * Operation getEventSubscriptionsCountWithHttpInfo
     *
     * @param  string $event_subscription_id Only select subscription with the given id. (optional)
     * @param  string $event_name Only select subscriptions for events with the given name. (optional)
     * @param  string $event_type Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)
     * @param  string $execution_id Only select subscriptions that belong to an execution with the given id. (optional)
     * @param  string $process_instance_id Only select subscriptions that belong to a process instance with the given id. (optional)
     * @param  string $activity_id Only select subscriptions that belong to an activity with the given id. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_event_subscriptions_without_tenant_id Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\CountResultDto|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEventSubscriptionsCountWithHttpInfo($event_subscription_id = null, $event_name = null, $event_type = null, $execution_id = null, $process_instance_id = null, $activity_id = null, $tenant_id_in = null, $without_tenant_id = null, $include_event_subscriptions_without_tenant_id = null)
    {
        $request = $this->getEventSubscriptionsCountRequest($event_subscription_id, $event_name, $event_type, $execution_id, $process_instance_id, $activity_id, $tenant_id_in, $without_tenant_id, $include_event_subscriptions_without_tenant_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\CountResultDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\CountResultDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEventSubscriptionsCountAsync
     *
     * 
     *
     * @param  string $event_subscription_id Only select subscription with the given id. (optional)
     * @param  string $event_name Only select subscriptions for events with the given name. (optional)
     * @param  string $event_type Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)
     * @param  string $execution_id Only select subscriptions that belong to an execution with the given id. (optional)
     * @param  string $process_instance_id Only select subscriptions that belong to a process instance with the given id. (optional)
     * @param  string $activity_id Only select subscriptions that belong to an activity with the given id. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_event_subscriptions_without_tenant_id Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventSubscriptionsCountAsync($event_subscription_id = null, $event_name = null, $event_type = null, $execution_id = null, $process_instance_id = null, $activity_id = null, $tenant_id_in = null, $without_tenant_id = null, $include_event_subscriptions_without_tenant_id = null)
    {
        return $this->getEventSubscriptionsCountAsyncWithHttpInfo($event_subscription_id, $event_name, $event_type, $execution_id, $process_instance_id, $activity_id, $tenant_id_in, $without_tenant_id, $include_event_subscriptions_without_tenant_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEventSubscriptionsCountAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $event_subscription_id Only select subscription with the given id. (optional)
     * @param  string $event_name Only select subscriptions for events with the given name. (optional)
     * @param  string $event_type Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)
     * @param  string $execution_id Only select subscriptions that belong to an execution with the given id. (optional)
     * @param  string $process_instance_id Only select subscriptions that belong to a process instance with the given id. (optional)
     * @param  string $activity_id Only select subscriptions that belong to an activity with the given id. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_event_subscriptions_without_tenant_id Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEventSubscriptionsCountAsyncWithHttpInfo($event_subscription_id = null, $event_name = null, $event_type = null, $execution_id = null, $process_instance_id = null, $activity_id = null, $tenant_id_in = null, $without_tenant_id = null, $include_event_subscriptions_without_tenant_id = null)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\CountResultDto';
        $request = $this->getEventSubscriptionsCountRequest($event_subscription_id, $event_name, $event_type, $execution_id, $process_instance_id, $activity_id, $tenant_id_in, $without_tenant_id, $include_event_subscriptions_without_tenant_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEventSubscriptionsCount'
     *
     * @param  string $event_subscription_id Only select subscription with the given id. (optional)
     * @param  string $event_name Only select subscriptions for events with the given name. (optional)
     * @param  string $event_type Only select subscriptions for events with the given type. Valid values: &#x60;message&#x60;, &#x60;signal&#x60;, &#x60;compensate&#x60; and &#x60;conditional&#x60;. (optional)
     * @param  string $execution_id Only select subscriptions that belong to an execution with the given id. (optional)
     * @param  string $process_instance_id Only select subscriptions that belong to a process instance with the given id. (optional)
     * @param  string $activity_id Only select subscriptions that belong to an activity with the given id. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. Only select subscriptions that belong to one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only select subscriptions which have no tenant id. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_event_subscriptions_without_tenant_id Select event subscriptions which have no tenant id. Can be used in combination with tenantIdIn parameter. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEventSubscriptionsCountRequest($event_subscription_id = null, $event_name = null, $event_type = null, $execution_id = null, $process_instance_id = null, $activity_id = null, $tenant_id_in = null, $without_tenant_id = null, $include_event_subscriptions_without_tenant_id = null)
    {

        $resourcePath = '/event-subscription/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($event_subscription_id !== null) {
            if('form' === 'form' && is_array($event_subscription_id)) {
                foreach($event_subscription_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventSubscriptionId'] = $event_subscription_id;
            }
        }
        // query params
        if ($event_name !== null) {
            if('form' === 'form' && is_array($event_name)) {
                foreach($event_name as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventName'] = $event_name;
            }
        }
        // query params
        if ($event_type !== null) {
            if('form' === 'form' && is_array($event_type)) {
                foreach($event_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['eventType'] = $event_type;
            }
        }
        // query params
        if ($execution_id !== null) {
            if('form' === 'form' && is_array($execution_id)) {
                foreach($execution_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['executionId'] = $execution_id;
            }
        }
        // query params
        if ($process_instance_id !== null) {
            if('form' === 'form' && is_array($process_instance_id)) {
                foreach($process_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceId'] = $process_instance_id;
            }
        }
        // query params
        if ($activity_id !== null) {
            if('form' === 'form' && is_array($activity_id)) {
                foreach($activity_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityId'] = $activity_id;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($include_event_subscriptions_without_tenant_id !== null) {
            if('form' === 'form' && is_array($include_event_subscriptions_without_tenant_id)) {
                foreach($include_event_subscriptions_without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['includeEventSubscriptionsWithoutTenantId'] = $include_event_subscriptions_without_tenant_id;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
