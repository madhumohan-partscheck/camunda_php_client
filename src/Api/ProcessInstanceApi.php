<?php
/**
 * ProcessInstanceApi
 * PHP version 7.2
 *
 * @category Class
 * @package  StrehleDe\CamundaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StrehleDe\CamundaClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use StrehleDe\CamundaClient\ApiException;
use StrehleDe\CamundaClient\Configuration;
use StrehleDe\CamundaClient\HeaderSelector;
use StrehleDe\CamundaClient\ObjectSerializer;

/**
 * ProcessInstanceApi Class Doc Comment
 *
 * @category Class
 * @package  StrehleDe\CamundaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProcessInstanceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteAsyncHistoricQueryBased
     *
     * @param  \StrehleDe\CamundaClient\Model\DeleteProcessInstancesDto $delete_process_instances_dto **Unallowed property**: &#x60;processInstanceQuery&#x60; (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\BatchDto|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function deleteAsyncHistoricQueryBased($delete_process_instances_dto = null)
    {
        list($response) = $this->deleteAsyncHistoricQueryBasedWithHttpInfo($delete_process_instances_dto);
        return $response;
    }

    /**
     * Operation deleteAsyncHistoricQueryBasedWithHttpInfo
     *
     * @param  \StrehleDe\CamundaClient\Model\DeleteProcessInstancesDto $delete_process_instances_dto **Unallowed property**: &#x60;processInstanceQuery&#x60; (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\BatchDto|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAsyncHistoricQueryBasedWithHttpInfo($delete_process_instances_dto = null)
    {
        $request = $this->deleteAsyncHistoricQueryBasedRequest($delete_process_instances_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\BatchDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\BatchDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\BatchDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAsyncHistoricQueryBasedAsync
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\DeleteProcessInstancesDto $delete_process_instances_dto **Unallowed property**: &#x60;processInstanceQuery&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsyncHistoricQueryBasedAsync($delete_process_instances_dto = null)
    {
        return $this->deleteAsyncHistoricQueryBasedAsyncWithHttpInfo($delete_process_instances_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAsyncHistoricQueryBasedAsyncWithHttpInfo
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\DeleteProcessInstancesDto $delete_process_instances_dto **Unallowed property**: &#x60;processInstanceQuery&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsyncHistoricQueryBasedAsyncWithHttpInfo($delete_process_instances_dto = null)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\BatchDto';
        $request = $this->deleteAsyncHistoricQueryBasedRequest($delete_process_instances_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAsyncHistoricQueryBased'
     *
     * @param  \StrehleDe\CamundaClient\Model\DeleteProcessInstancesDto $delete_process_instances_dto **Unallowed property**: &#x60;processInstanceQuery&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAsyncHistoricQueryBasedRequest($delete_process_instances_dto = null)
    {

        $resourcePath = '/process-instance/delete-historic-query-based';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($delete_process_instances_dto)) {
            $_tempBody = $delete_process_instances_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProcessInstance
     *
     * @param  string $id The id of the process instance to be deleted. (required)
     * @param  bool $skip_custom_listeners If set to true, the custom listeners will be skipped. (optional, default to false)
     * @param  bool $skip_io_mappings If set to true, the input/output mappings will be skipped. (optional, default to false)
     * @param  bool $skip_subprocesses If set to true, subprocesses related to deleted processes will be skipped. (optional, default to false)
     * @param  bool $fail_if_not_exists If set to false, the request will still be successful if the process id is not found. (optional, default to true)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProcessInstance($id, $skip_custom_listeners = false, $skip_io_mappings = false, $skip_subprocesses = false, $fail_if_not_exists = true)
    {
        $this->deleteProcessInstanceWithHttpInfo($id, $skip_custom_listeners, $skip_io_mappings, $skip_subprocesses, $fail_if_not_exists);
    }

    /**
     * Operation deleteProcessInstanceWithHttpInfo
     *
     * @param  string $id The id of the process instance to be deleted. (required)
     * @param  bool $skip_custom_listeners If set to true, the custom listeners will be skipped. (optional, default to false)
     * @param  bool $skip_io_mappings If set to true, the input/output mappings will be skipped. (optional, default to false)
     * @param  bool $skip_subprocesses If set to true, subprocesses related to deleted processes will be skipped. (optional, default to false)
     * @param  bool $fail_if_not_exists If set to false, the request will still be successful if the process id is not found. (optional, default to true)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProcessInstanceWithHttpInfo($id, $skip_custom_listeners = false, $skip_io_mappings = false, $skip_subprocesses = false, $fail_if_not_exists = true)
    {
        $request = $this->deleteProcessInstanceRequest($id, $skip_custom_listeners, $skip_io_mappings, $skip_subprocesses, $fail_if_not_exists);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProcessInstanceAsync
     *
     * 
     *
     * @param  string $id The id of the process instance to be deleted. (required)
     * @param  bool $skip_custom_listeners If set to true, the custom listeners will be skipped. (optional, default to false)
     * @param  bool $skip_io_mappings If set to true, the input/output mappings will be skipped. (optional, default to false)
     * @param  bool $skip_subprocesses If set to true, subprocesses related to deleted processes will be skipped. (optional, default to false)
     * @param  bool $fail_if_not_exists If set to false, the request will still be successful if the process id is not found. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProcessInstanceAsync($id, $skip_custom_listeners = false, $skip_io_mappings = false, $skip_subprocesses = false, $fail_if_not_exists = true)
    {
        return $this->deleteProcessInstanceAsyncWithHttpInfo($id, $skip_custom_listeners, $skip_io_mappings, $skip_subprocesses, $fail_if_not_exists)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProcessInstanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id of the process instance to be deleted. (required)
     * @param  bool $skip_custom_listeners If set to true, the custom listeners will be skipped. (optional, default to false)
     * @param  bool $skip_io_mappings If set to true, the input/output mappings will be skipped. (optional, default to false)
     * @param  bool $skip_subprocesses If set to true, subprocesses related to deleted processes will be skipped. (optional, default to false)
     * @param  bool $fail_if_not_exists If set to false, the request will still be successful if the process id is not found. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProcessInstanceAsyncWithHttpInfo($id, $skip_custom_listeners = false, $skip_io_mappings = false, $skip_subprocesses = false, $fail_if_not_exists = true)
    {
        $returnType = '';
        $request = $this->deleteProcessInstanceRequest($id, $skip_custom_listeners, $skip_io_mappings, $skip_subprocesses, $fail_if_not_exists);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProcessInstance'
     *
     * @param  string $id The id of the process instance to be deleted. (required)
     * @param  bool $skip_custom_listeners If set to true, the custom listeners will be skipped. (optional, default to false)
     * @param  bool $skip_io_mappings If set to true, the input/output mappings will be skipped. (optional, default to false)
     * @param  bool $skip_subprocesses If set to true, subprocesses related to deleted processes will be skipped. (optional, default to false)
     * @param  bool $fail_if_not_exists If set to false, the request will still be successful if the process id is not found. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProcessInstanceRequest($id, $skip_custom_listeners = false, $skip_io_mappings = false, $skip_subprocesses = false, $fail_if_not_exists = true)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteProcessInstance'
            );
        }

        $resourcePath = '/process-instance/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip_custom_listeners !== null) {
            if('form' === 'form' && is_array($skip_custom_listeners)) {
                foreach($skip_custom_listeners as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skipCustomListeners'] = $skip_custom_listeners;
            }
        }
        // query params
        if ($skip_io_mappings !== null) {
            if('form' === 'form' && is_array($skip_io_mappings)) {
                foreach($skip_io_mappings as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skipIoMappings'] = $skip_io_mappings;
            }
        }
        // query params
        if ($skip_subprocesses !== null) {
            if('form' === 'form' && is_array($skip_subprocesses)) {
                foreach($skip_subprocesses as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['skipSubprocesses'] = $skip_subprocesses;
            }
        }
        // query params
        if ($fail_if_not_exists !== null) {
            if('form' === 'form' && is_array($fail_if_not_exists)) {
                foreach($fail_if_not_exists as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['failIfNotExists'] = $fail_if_not_exists;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProcessInstanceVariable
     *
     * @param  string $id The id of the process instance to delete the variable from. (required)
     * @param  string $var_name The name of the variable to delete. (required)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteProcessInstanceVariable($id, $var_name)
    {
        $this->deleteProcessInstanceVariableWithHttpInfo($id, $var_name);
    }

    /**
     * Operation deleteProcessInstanceVariableWithHttpInfo
     *
     * @param  string $id The id of the process instance to delete the variable from. (required)
     * @param  string $var_name The name of the variable to delete. (required)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProcessInstanceVariableWithHttpInfo($id, $var_name)
    {
        $request = $this->deleteProcessInstanceVariableRequest($id, $var_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProcessInstanceVariableAsync
     *
     * 
     *
     * @param  string $id The id of the process instance to delete the variable from. (required)
     * @param  string $var_name The name of the variable to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProcessInstanceVariableAsync($id, $var_name)
    {
        return $this->deleteProcessInstanceVariableAsyncWithHttpInfo($id, $var_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProcessInstanceVariableAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id of the process instance to delete the variable from. (required)
     * @param  string $var_name The name of the variable to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProcessInstanceVariableAsyncWithHttpInfo($id, $var_name)
    {
        $returnType = '';
        $request = $this->deleteProcessInstanceVariableRequest($id, $var_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProcessInstanceVariable'
     *
     * @param  string $id The id of the process instance to delete the variable from. (required)
     * @param  string $var_name The name of the variable to delete. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProcessInstanceVariableRequest($id, $var_name)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteProcessInstanceVariable'
            );
        }
        // verify the required parameter 'var_name' is set
        if ($var_name === null || (is_array($var_name) && count($var_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $var_name when calling deleteProcessInstanceVariable'
            );
        }

        $resourcePath = '/process-instance/{id}/variables/{varName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($var_name !== null) {
            $resourcePath = str_replace(
                '{' . 'varName' . '}',
                ObjectSerializer::toPathValue($var_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteProcessInstancesAsyncOperation
     *
     * @param  \StrehleDe\CamundaClient\Model\DeleteProcessInstancesDto $delete_process_instances_dto **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60; (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\BatchDto|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function deleteProcessInstancesAsyncOperation($delete_process_instances_dto = null)
    {
        list($response) = $this->deleteProcessInstancesAsyncOperationWithHttpInfo($delete_process_instances_dto);
        return $response;
    }

    /**
     * Operation deleteProcessInstancesAsyncOperationWithHttpInfo
     *
     * @param  \StrehleDe\CamundaClient\Model\DeleteProcessInstancesDto $delete_process_instances_dto **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60; (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\BatchDto|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProcessInstancesAsyncOperationWithHttpInfo($delete_process_instances_dto = null)
    {
        $request = $this->deleteProcessInstancesAsyncOperationRequest($delete_process_instances_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\BatchDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\BatchDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\BatchDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteProcessInstancesAsyncOperationAsync
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\DeleteProcessInstancesDto $delete_process_instances_dto **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProcessInstancesAsyncOperationAsync($delete_process_instances_dto = null)
    {
        return $this->deleteProcessInstancesAsyncOperationAsyncWithHttpInfo($delete_process_instances_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteProcessInstancesAsyncOperationAsyncWithHttpInfo
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\DeleteProcessInstancesDto $delete_process_instances_dto **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteProcessInstancesAsyncOperationAsyncWithHttpInfo($delete_process_instances_dto = null)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\BatchDto';
        $request = $this->deleteProcessInstancesAsyncOperationRequest($delete_process_instances_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteProcessInstancesAsyncOperation'
     *
     * @param  \StrehleDe\CamundaClient\Model\DeleteProcessInstancesDto $delete_process_instances_dto **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProcessInstancesAsyncOperationRequest($delete_process_instances_dto = null)
    {

        $resourcePath = '/process-instance/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($delete_process_instances_dto)) {
            $_tempBody = $delete_process_instances_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getActivityInstanceTree
     *
     * @param  string $id The id of the process instance for which the activity instance should be retrieved. (required)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\ActivityInstanceDto|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function getActivityInstanceTree($id)
    {
        list($response) = $this->getActivityInstanceTreeWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getActivityInstanceTreeWithHttpInfo
     *
     * @param  string $id The id of the process instance for which the activity instance should be retrieved. (required)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\ActivityInstanceDto|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getActivityInstanceTreeWithHttpInfo($id)
    {
        $request = $this->getActivityInstanceTreeRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\ActivityInstanceDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ActivityInstanceDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\ActivityInstanceDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ActivityInstanceDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getActivityInstanceTreeAsync
     *
     * 
     *
     * @param  string $id The id of the process instance for which the activity instance should be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivityInstanceTreeAsync($id)
    {
        return $this->getActivityInstanceTreeAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getActivityInstanceTreeAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id of the process instance for which the activity instance should be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivityInstanceTreeAsyncWithHttpInfo($id)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\ActivityInstanceDto';
        $request = $this->getActivityInstanceTreeRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getActivityInstanceTree'
     *
     * @param  string $id The id of the process instance for which the activity instance should be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getActivityInstanceTreeRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getActivityInstanceTree'
            );
        }

        $resourcePath = '/process-instance/{id}/activity-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessInstanceVariable
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\VariableValueDto|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function getProcessInstanceVariable($id, $var_name, $deserialize_value = true)
    {
        list($response) = $this->getProcessInstanceVariableWithHttpInfo($id, $var_name, $deserialize_value);
        return $response;
    }

    /**
     * Operation getProcessInstanceVariableWithHttpInfo
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\VariableValueDto|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessInstanceVariableWithHttpInfo($id, $var_name, $deserialize_value = true)
    {
        $request = $this->getProcessInstanceVariableRequest($id, $var_name, $deserialize_value);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\VariableValueDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\VariableValueDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\VariableValueDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\VariableValueDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessInstanceVariableAsync
     *
     * 
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceVariableAsync($id, $var_name, $deserialize_value = true)
    {
        return $this->getProcessInstanceVariableAsyncWithHttpInfo($id, $var_name, $deserialize_value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessInstanceVariableAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceVariableAsyncWithHttpInfo($id, $var_name, $deserialize_value = true)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\VariableValueDto';
        $request = $this->getProcessInstanceVariableRequest($id, $var_name, $deserialize_value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessInstanceVariable'
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessInstanceVariableRequest($id, $var_name, $deserialize_value = true)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProcessInstanceVariable'
            );
        }
        // verify the required parameter 'var_name' is set
        if ($var_name === null || (is_array($var_name) && count($var_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $var_name when calling getProcessInstanceVariable'
            );
        }

        $resourcePath = '/process-instance/{id}/variables/{varName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($deserialize_value !== null) {
            if('form' === 'form' && is_array($deserialize_value)) {
                foreach($deserialize_value as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deserializeValue'] = $deserialize_value;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($var_name !== null) {
            $resourcePath = str_replace(
                '{' . 'varName' . '}',
                ObjectSerializer::toPathValue($var_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessInstanceVariableBinary
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\StrehleDe\CamundaClient\Model\ExceptionDto|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function getProcessInstanceVariableBinary($id, $var_name)
    {
        list($response) = $this->getProcessInstanceVariableBinaryWithHttpInfo($id, $var_name);
        return $response;
    }

    /**
     * Operation getProcessInstanceVariableBinaryWithHttpInfo
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\StrehleDe\CamundaClient\Model\ExceptionDto|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessInstanceVariableBinaryWithHttpInfo($id, $var_name)
    {
        $request = $this->getProcessInstanceVariableBinaryRequest($id, $var_name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessInstanceVariableBinaryAsync
     *
     * 
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceVariableBinaryAsync($id, $var_name)
    {
        return $this->getProcessInstanceVariableBinaryAsyncWithHttpInfo($id, $var_name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessInstanceVariableBinaryAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceVariableBinaryAsyncWithHttpInfo($id, $var_name)
    {
        $returnType = '\SplFileObject';
        $request = $this->getProcessInstanceVariableBinaryRequest($id, $var_name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessInstanceVariableBinary'
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessInstanceVariableBinaryRequest($id, $var_name)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProcessInstanceVariableBinary'
            );
        }
        // verify the required parameter 'var_name' is set
        if ($var_name === null || (is_array($var_name) && count($var_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $var_name when calling getProcessInstanceVariableBinary'
            );
        }

        $resourcePath = '/process-instance/{id}/variables/{varName}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($var_name !== null) {
            $resourcePath = str_replace(
                '{' . 'varName' . '}',
                ObjectSerializer::toPathValue($var_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream', 'text/plain', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream', 'text/plain', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessInstanceVariables
     *
     * @param  string $id The id of the process instance to retrieve the variables from. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return map[string,\StrehleDe\CamundaClient\Model\VariableValueDto]|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function getProcessInstanceVariables($id, $deserialize_value = true)
    {
        list($response) = $this->getProcessInstanceVariablesWithHttpInfo($id, $deserialize_value);
        return $response;
    }

    /**
     * Operation getProcessInstanceVariablesWithHttpInfo
     *
     * @param  string $id The id of the process instance to retrieve the variables from. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of map[string,\StrehleDe\CamundaClient\Model\VariableValueDto]|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessInstanceVariablesWithHttpInfo($id, $deserialize_value = true)
    {
        $request = $this->getProcessInstanceVariablesRequest($id, $deserialize_value);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('map[string,\StrehleDe\CamundaClient\Model\VariableValueDto]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'map[string,\StrehleDe\CamundaClient\Model\VariableValueDto]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'map[string,\StrehleDe\CamundaClient\Model\VariableValueDto]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'map[string,\StrehleDe\CamundaClient\Model\VariableValueDto]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessInstanceVariablesAsync
     *
     * 
     *
     * @param  string $id The id of the process instance to retrieve the variables from. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceVariablesAsync($id, $deserialize_value = true)
    {
        return $this->getProcessInstanceVariablesAsyncWithHttpInfo($id, $deserialize_value)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessInstanceVariablesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id of the process instance to retrieve the variables from. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstanceVariablesAsyncWithHttpInfo($id, $deserialize_value = true)
    {
        $returnType = 'map[string,\StrehleDe\CamundaClient\Model\VariableValueDto]';
        $request = $this->getProcessInstanceVariablesRequest($id, $deserialize_value);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessInstanceVariables'
     *
     * @param  string $id The id of the process instance to retrieve the variables from. (required)
     * @param  bool $deserialize_value Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default true).  If set to true, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#39;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#39;s classpath.  If set to false, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  Note: While true is the default value for reasons of backward compatibility, we recommend setting this parameter to false when developing web applications that are independent of the Java process applications deployed to the engine. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessInstanceVariablesRequest($id, $deserialize_value = true)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getProcessInstanceVariables'
            );
        }

        $resourcePath = '/process-instance/{id}/variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($deserialize_value !== null) {
            if('form' === 'form' && is_array($deserialize_value)) {
                foreach($deserialize_value as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deserializeValue'] = $deserialize_value;
            }
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessInstances
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_ids Filter by a comma-separated list of process instance ids. (optional)
     * @param  string $business_key Filter by process instance business key. (optional)
     * @param  string $business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $process_definition_id Filter by the deployment the id belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys. (optional)
     * @param  string $process_definition_key_not_in Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  string $super_process_instance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id. (optional)
     * @param  string $super_case_instance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id. (optional)
     * @param  bool $active Only include active process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $with_incident Filter by presence of incidents. Selects only process instances that have an incident. (optional, default to false)
     * @param  string $incident_id Filter by the incident id. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include process instances which belong to no tenant. (optional, default to false)
     * @param  bool $process_definition_without_tenant_id Only include process instances which process definition has no tenant id. (optional, default to false)
     * @param  string $activity_id_in Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional, default to false)
     * @param  bool $leaf_process_instances Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances). (optional, default to false)
     * @param  string $variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (optional, default to false)
     * @param  bool $variable_values_ignore_case Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (optional, default to false)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\ProcessInstanceDto[]|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function getProcessInstances($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_ids = null, $business_key = null, $business_key_like = null, $case_instance_id = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_key_not_in = null, $deployment_id = null, $super_process_instance = null, $sub_process_instance = null, $super_case_instance = null, $sub_case_instance = null, $active = false, $suspended = false, $with_incident = false, $incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $tenant_id_in = null, $without_tenant_id = false, $process_definition_without_tenant_id = false, $activity_id_in = null, $root_process_instances = false, $leaf_process_instances = false, $variables = null, $variable_names_ignore_case = false, $variable_values_ignore_case = false)
    {
        list($response) = $this->getProcessInstancesWithHttpInfo($sort_by, $sort_order, $first_result, $max_results, $process_instance_ids, $business_key, $business_key_like, $case_instance_id, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_key_not_in, $deployment_id, $super_process_instance, $sub_process_instance, $super_case_instance, $sub_case_instance, $active, $suspended, $with_incident, $incident_id, $incident_type, $incident_message, $incident_message_like, $tenant_id_in, $without_tenant_id, $process_definition_without_tenant_id, $activity_id_in, $root_process_instances, $leaf_process_instances, $variables, $variable_names_ignore_case, $variable_values_ignore_case);
        return $response;
    }

    /**
     * Operation getProcessInstancesWithHttpInfo
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_ids Filter by a comma-separated list of process instance ids. (optional)
     * @param  string $business_key Filter by process instance business key. (optional)
     * @param  string $business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $process_definition_id Filter by the deployment the id belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys. (optional)
     * @param  string $process_definition_key_not_in Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  string $super_process_instance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id. (optional)
     * @param  string $super_case_instance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id. (optional)
     * @param  bool $active Only include active process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $with_incident Filter by presence of incidents. Selects only process instances that have an incident. (optional, default to false)
     * @param  string $incident_id Filter by the incident id. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include process instances which belong to no tenant. (optional, default to false)
     * @param  bool $process_definition_without_tenant_id Only include process instances which process definition has no tenant id. (optional, default to false)
     * @param  string $activity_id_in Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional, default to false)
     * @param  bool $leaf_process_instances Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances). (optional, default to false)
     * @param  string $variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (optional, default to false)
     * @param  bool $variable_values_ignore_case Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (optional, default to false)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\ProcessInstanceDto[]|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessInstancesWithHttpInfo($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_ids = null, $business_key = null, $business_key_like = null, $case_instance_id = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_key_not_in = null, $deployment_id = null, $super_process_instance = null, $sub_process_instance = null, $super_case_instance = null, $sub_case_instance = null, $active = false, $suspended = false, $with_incident = false, $incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $tenant_id_in = null, $without_tenant_id = false, $process_definition_without_tenant_id = false, $activity_id_in = null, $root_process_instances = false, $leaf_process_instances = false, $variables = null, $variable_names_ignore_case = false, $variable_values_ignore_case = false)
    {
        $request = $this->getProcessInstancesRequest($sort_by, $sort_order, $first_result, $max_results, $process_instance_ids, $business_key, $business_key_like, $case_instance_id, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_key_not_in, $deployment_id, $super_process_instance, $sub_process_instance, $super_case_instance, $sub_case_instance, $active, $suspended, $with_incident, $incident_id, $incident_type, $incident_message, $incident_message_like, $tenant_id_in, $without_tenant_id, $process_definition_without_tenant_id, $activity_id_in, $root_process_instances, $leaf_process_instances, $variables, $variable_names_ignore_case, $variable_values_ignore_case);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\ProcessInstanceDto[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ProcessInstanceDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\ProcessInstanceDto[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ProcessInstanceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessInstancesAsync
     *
     * 
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_ids Filter by a comma-separated list of process instance ids. (optional)
     * @param  string $business_key Filter by process instance business key. (optional)
     * @param  string $business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $process_definition_id Filter by the deployment the id belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys. (optional)
     * @param  string $process_definition_key_not_in Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  string $super_process_instance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id. (optional)
     * @param  string $super_case_instance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id. (optional)
     * @param  bool $active Only include active process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $with_incident Filter by presence of incidents. Selects only process instances that have an incident. (optional, default to false)
     * @param  string $incident_id Filter by the incident id. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include process instances which belong to no tenant. (optional, default to false)
     * @param  bool $process_definition_without_tenant_id Only include process instances which process definition has no tenant id. (optional, default to false)
     * @param  string $activity_id_in Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional, default to false)
     * @param  bool $leaf_process_instances Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances). (optional, default to false)
     * @param  string $variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (optional, default to false)
     * @param  bool $variable_values_ignore_case Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstancesAsync($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_ids = null, $business_key = null, $business_key_like = null, $case_instance_id = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_key_not_in = null, $deployment_id = null, $super_process_instance = null, $sub_process_instance = null, $super_case_instance = null, $sub_case_instance = null, $active = false, $suspended = false, $with_incident = false, $incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $tenant_id_in = null, $without_tenant_id = false, $process_definition_without_tenant_id = false, $activity_id_in = null, $root_process_instances = false, $leaf_process_instances = false, $variables = null, $variable_names_ignore_case = false, $variable_values_ignore_case = false)
    {
        return $this->getProcessInstancesAsyncWithHttpInfo($sort_by, $sort_order, $first_result, $max_results, $process_instance_ids, $business_key, $business_key_like, $case_instance_id, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_key_not_in, $deployment_id, $super_process_instance, $sub_process_instance, $super_case_instance, $sub_case_instance, $active, $suspended, $with_incident, $incident_id, $incident_type, $incident_message, $incident_message_like, $tenant_id_in, $without_tenant_id, $process_definition_without_tenant_id, $activity_id_in, $root_process_instances, $leaf_process_instances, $variables, $variable_names_ignore_case, $variable_values_ignore_case)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessInstancesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_ids Filter by a comma-separated list of process instance ids. (optional)
     * @param  string $business_key Filter by process instance business key. (optional)
     * @param  string $business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $process_definition_id Filter by the deployment the id belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys. (optional)
     * @param  string $process_definition_key_not_in Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  string $super_process_instance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id. (optional)
     * @param  string $super_case_instance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id. (optional)
     * @param  bool $active Only include active process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $with_incident Filter by presence of incidents. Selects only process instances that have an incident. (optional, default to false)
     * @param  string $incident_id Filter by the incident id. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include process instances which belong to no tenant. (optional, default to false)
     * @param  bool $process_definition_without_tenant_id Only include process instances which process definition has no tenant id. (optional, default to false)
     * @param  string $activity_id_in Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional, default to false)
     * @param  bool $leaf_process_instances Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances). (optional, default to false)
     * @param  string $variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (optional, default to false)
     * @param  bool $variable_values_ignore_case Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstancesAsyncWithHttpInfo($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_ids = null, $business_key = null, $business_key_like = null, $case_instance_id = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_key_not_in = null, $deployment_id = null, $super_process_instance = null, $sub_process_instance = null, $super_case_instance = null, $sub_case_instance = null, $active = false, $suspended = false, $with_incident = false, $incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $tenant_id_in = null, $without_tenant_id = false, $process_definition_without_tenant_id = false, $activity_id_in = null, $root_process_instances = false, $leaf_process_instances = false, $variables = null, $variable_names_ignore_case = false, $variable_values_ignore_case = false)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\ProcessInstanceDto[]';
        $request = $this->getProcessInstancesRequest($sort_by, $sort_order, $first_result, $max_results, $process_instance_ids, $business_key, $business_key_like, $case_instance_id, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_key_not_in, $deployment_id, $super_process_instance, $sub_process_instance, $super_case_instance, $sub_case_instance, $active, $suspended, $with_incident, $incident_id, $incident_type, $incident_message, $incident_message_like, $tenant_id_in, $without_tenant_id, $process_definition_without_tenant_id, $activity_id_in, $root_process_instances, $leaf_process_instances, $variables, $variable_names_ignore_case, $variable_values_ignore_case);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessInstances'
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_ids Filter by a comma-separated list of process instance ids. (optional)
     * @param  string $business_key Filter by process instance business key. (optional)
     * @param  string $business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $process_definition_id Filter by the deployment the id belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys. (optional)
     * @param  string $process_definition_key_not_in Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  string $super_process_instance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id. (optional)
     * @param  string $super_case_instance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id. (optional)
     * @param  bool $active Only include active process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $with_incident Filter by presence of incidents. Selects only process instances that have an incident. (optional, default to false)
     * @param  string $incident_id Filter by the incident id. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include process instances which belong to no tenant. (optional, default to false)
     * @param  bool $process_definition_without_tenant_id Only include process instances which process definition has no tenant id. (optional, default to false)
     * @param  string $activity_id_in Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional, default to false)
     * @param  bool $leaf_process_instances Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances). (optional, default to false)
     * @param  string $variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (optional, default to false)
     * @param  bool $variable_values_ignore_case Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessInstancesRequest($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_ids = null, $business_key = null, $business_key_like = null, $case_instance_id = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_key_not_in = null, $deployment_id = null, $super_process_instance = null, $sub_process_instance = null, $super_case_instance = null, $sub_case_instance = null, $active = false, $suspended = false, $with_incident = false, $incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $tenant_id_in = null, $without_tenant_id = false, $process_definition_without_tenant_id = false, $activity_id_in = null, $root_process_instances = false, $leaf_process_instances = false, $variables = null, $variable_names_ignore_case = false, $variable_values_ignore_case = false)
    {

        $resourcePath = '/process-instance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortBy'] = $sort_by;
            }
        }
        // query params
        if ($sort_order !== null) {
            if('form' === 'form' && is_array($sort_order)) {
                foreach($sort_order as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sortOrder'] = $sort_order;
            }
        }
        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }
        // query params
        if ($process_instance_ids !== null) {
            if('form' === 'form' && is_array($process_instance_ids)) {
                foreach($process_instance_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceIds'] = $process_instance_ids;
            }
        }
        // query params
        if ($business_key !== null) {
            if('form' === 'form' && is_array($business_key)) {
                foreach($business_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['businessKey'] = $business_key;
            }
        }
        // query params
        if ($business_key_like !== null) {
            if('form' === 'form' && is_array($business_key_like)) {
                foreach($business_key_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['businessKeyLike'] = $business_key_like;
            }
        }
        // query params
        if ($case_instance_id !== null) {
            if('form' === 'form' && is_array($case_instance_id)) {
                foreach($case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseInstanceId'] = $case_instance_id;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key !== null) {
            if('form' === 'form' && is_array($process_definition_key)) {
                foreach($process_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKey'] = $process_definition_key;
            }
        }
        // query params
        if ($process_definition_key_in !== null) {
            if('form' === 'form' && is_array($process_definition_key_in)) {
                foreach($process_definition_key_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKeyIn'] = $process_definition_key_in;
            }
        }
        // query params
        if ($process_definition_key_not_in !== null) {
            if('form' === 'form' && is_array($process_definition_key_not_in)) {
                foreach($process_definition_key_not_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKeyNotIn'] = $process_definition_key_not_in;
            }
        }
        // query params
        if ($deployment_id !== null) {
            if('form' === 'form' && is_array($deployment_id)) {
                foreach($deployment_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deploymentId'] = $deployment_id;
            }
        }
        // query params
        if ($super_process_instance !== null) {
            if('form' === 'form' && is_array($super_process_instance)) {
                foreach($super_process_instance as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['superProcessInstance'] = $super_process_instance;
            }
        }
        // query params
        if ($sub_process_instance !== null) {
            if('form' === 'form' && is_array($sub_process_instance)) {
                foreach($sub_process_instance as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subProcessInstance'] = $sub_process_instance;
            }
        }
        // query params
        if ($super_case_instance !== null) {
            if('form' === 'form' && is_array($super_case_instance)) {
                foreach($super_case_instance as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['superCaseInstance'] = $super_case_instance;
            }
        }
        // query params
        if ($sub_case_instance !== null) {
            if('form' === 'form' && is_array($sub_case_instance)) {
                foreach($sub_case_instance as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subCaseInstance'] = $sub_case_instance;
            }
        }
        // query params
        if ($active !== null) {
            if('form' === 'form' && is_array($active)) {
                foreach($active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['active'] = $active;
            }
        }
        // query params
        if ($suspended !== null) {
            if('form' === 'form' && is_array($suspended)) {
                foreach($suspended as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['suspended'] = $suspended;
            }
        }
        // query params
        if ($with_incident !== null) {
            if('form' === 'form' && is_array($with_incident)) {
                foreach($with_incident as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withIncident'] = $with_incident;
            }
        }
        // query params
        if ($incident_id !== null) {
            if('form' === 'form' && is_array($incident_id)) {
                foreach($incident_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentId'] = $incident_id;
            }
        }
        // query params
        if ($incident_type !== null) {
            if('form' === 'form' && is_array($incident_type)) {
                foreach($incident_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentType'] = $incident_type;
            }
        }
        // query params
        if ($incident_message !== null) {
            if('form' === 'form' && is_array($incident_message)) {
                foreach($incident_message as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentMessage'] = $incident_message;
            }
        }
        // query params
        if ($incident_message_like !== null) {
            if('form' === 'form' && is_array($incident_message_like)) {
                foreach($incident_message_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentMessageLike'] = $incident_message_like;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($process_definition_without_tenant_id !== null) {
            if('form' === 'form' && is_array($process_definition_without_tenant_id)) {
                foreach($process_definition_without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionWithoutTenantId'] = $process_definition_without_tenant_id;
            }
        }
        // query params
        if ($activity_id_in !== null) {
            if('form' === 'form' && is_array($activity_id_in)) {
                foreach($activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityIdIn'] = $activity_id_in;
            }
        }
        // query params
        if ($root_process_instances !== null) {
            if('form' === 'form' && is_array($root_process_instances)) {
                foreach($root_process_instances as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rootProcessInstances'] = $root_process_instances;
            }
        }
        // query params
        if ($leaf_process_instances !== null) {
            if('form' === 'form' && is_array($leaf_process_instances)) {
                foreach($leaf_process_instances as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['leafProcessInstances'] = $leaf_process_instances;
            }
        }
        // query params
        if ($variables !== null) {
            if('form' === 'form' && is_array($variables)) {
                foreach($variables as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variables'] = $variables;
            }
        }
        // query params
        if ($variable_names_ignore_case !== null) {
            if('form' === 'form' && is_array($variable_names_ignore_case)) {
                foreach($variable_names_ignore_case as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableNamesIgnoreCase'] = $variable_names_ignore_case;
            }
        }
        // query params
        if ($variable_values_ignore_case !== null) {
            if('form' === 'form' && is_array($variable_values_ignore_case)) {
                foreach($variable_values_ignore_case as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableValuesIgnoreCase'] = $variable_values_ignore_case;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessInstancesCount
     *
     * @param  string $process_instance_ids Filter by a comma-separated list of process instance ids. (optional)
     * @param  string $business_key Filter by process instance business key. (optional)
     * @param  string $business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $process_definition_id Filter by the deployment the id belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys. (optional)
     * @param  string $process_definition_key_not_in Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  string $super_process_instance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id. (optional)
     * @param  string $super_case_instance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id. (optional)
     * @param  bool $active Only include active process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $with_incident Filter by presence of incidents. Selects only process instances that have an incident. (optional, default to false)
     * @param  string $incident_id Filter by the incident id. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include process instances which belong to no tenant. (optional, default to false)
     * @param  bool $process_definition_without_tenant_id Only include process instances which process definition has no tenant id. (optional, default to false)
     * @param  string $activity_id_in Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional, default to false)
     * @param  bool $leaf_process_instances Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances). (optional, default to false)
     * @param  string $variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (optional, default to false)
     * @param  bool $variable_values_ignore_case Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (optional, default to false)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\CountResultDto|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function getProcessInstancesCount($process_instance_ids = null, $business_key = null, $business_key_like = null, $case_instance_id = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_key_not_in = null, $deployment_id = null, $super_process_instance = null, $sub_process_instance = null, $super_case_instance = null, $sub_case_instance = null, $active = false, $suspended = false, $with_incident = false, $incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $tenant_id_in = null, $without_tenant_id = false, $process_definition_without_tenant_id = false, $activity_id_in = null, $root_process_instances = false, $leaf_process_instances = false, $variables = null, $variable_names_ignore_case = false, $variable_values_ignore_case = false)
    {
        list($response) = $this->getProcessInstancesCountWithHttpInfo($process_instance_ids, $business_key, $business_key_like, $case_instance_id, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_key_not_in, $deployment_id, $super_process_instance, $sub_process_instance, $super_case_instance, $sub_case_instance, $active, $suspended, $with_incident, $incident_id, $incident_type, $incident_message, $incident_message_like, $tenant_id_in, $without_tenant_id, $process_definition_without_tenant_id, $activity_id_in, $root_process_instances, $leaf_process_instances, $variables, $variable_names_ignore_case, $variable_values_ignore_case);
        return $response;
    }

    /**
     * Operation getProcessInstancesCountWithHttpInfo
     *
     * @param  string $process_instance_ids Filter by a comma-separated list of process instance ids. (optional)
     * @param  string $business_key Filter by process instance business key. (optional)
     * @param  string $business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $process_definition_id Filter by the deployment the id belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys. (optional)
     * @param  string $process_definition_key_not_in Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  string $super_process_instance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id. (optional)
     * @param  string $super_case_instance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id. (optional)
     * @param  bool $active Only include active process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $with_incident Filter by presence of incidents. Selects only process instances that have an incident. (optional, default to false)
     * @param  string $incident_id Filter by the incident id. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include process instances which belong to no tenant. (optional, default to false)
     * @param  bool $process_definition_without_tenant_id Only include process instances which process definition has no tenant id. (optional, default to false)
     * @param  string $activity_id_in Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional, default to false)
     * @param  bool $leaf_process_instances Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances). (optional, default to false)
     * @param  string $variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (optional, default to false)
     * @param  bool $variable_values_ignore_case Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (optional, default to false)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\CountResultDto|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessInstancesCountWithHttpInfo($process_instance_ids = null, $business_key = null, $business_key_like = null, $case_instance_id = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_key_not_in = null, $deployment_id = null, $super_process_instance = null, $sub_process_instance = null, $super_case_instance = null, $sub_case_instance = null, $active = false, $suspended = false, $with_incident = false, $incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $tenant_id_in = null, $without_tenant_id = false, $process_definition_without_tenant_id = false, $activity_id_in = null, $root_process_instances = false, $leaf_process_instances = false, $variables = null, $variable_names_ignore_case = false, $variable_values_ignore_case = false)
    {
        $request = $this->getProcessInstancesCountRequest($process_instance_ids, $business_key, $business_key_like, $case_instance_id, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_key_not_in, $deployment_id, $super_process_instance, $sub_process_instance, $super_case_instance, $sub_case_instance, $active, $suspended, $with_incident, $incident_id, $incident_type, $incident_message, $incident_message_like, $tenant_id_in, $without_tenant_id, $process_definition_without_tenant_id, $activity_id_in, $root_process_instances, $leaf_process_instances, $variables, $variable_names_ignore_case, $variable_values_ignore_case);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\CountResultDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\CountResultDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessInstancesCountAsync
     *
     * 
     *
     * @param  string $process_instance_ids Filter by a comma-separated list of process instance ids. (optional)
     * @param  string $business_key Filter by process instance business key. (optional)
     * @param  string $business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $process_definition_id Filter by the deployment the id belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys. (optional)
     * @param  string $process_definition_key_not_in Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  string $super_process_instance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id. (optional)
     * @param  string $super_case_instance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id. (optional)
     * @param  bool $active Only include active process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $with_incident Filter by presence of incidents. Selects only process instances that have an incident. (optional, default to false)
     * @param  string $incident_id Filter by the incident id. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include process instances which belong to no tenant. (optional, default to false)
     * @param  bool $process_definition_without_tenant_id Only include process instances which process definition has no tenant id. (optional, default to false)
     * @param  string $activity_id_in Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional, default to false)
     * @param  bool $leaf_process_instances Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances). (optional, default to false)
     * @param  string $variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (optional, default to false)
     * @param  bool $variable_values_ignore_case Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstancesCountAsync($process_instance_ids = null, $business_key = null, $business_key_like = null, $case_instance_id = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_key_not_in = null, $deployment_id = null, $super_process_instance = null, $sub_process_instance = null, $super_case_instance = null, $sub_case_instance = null, $active = false, $suspended = false, $with_incident = false, $incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $tenant_id_in = null, $without_tenant_id = false, $process_definition_without_tenant_id = false, $activity_id_in = null, $root_process_instances = false, $leaf_process_instances = false, $variables = null, $variable_names_ignore_case = false, $variable_values_ignore_case = false)
    {
        return $this->getProcessInstancesCountAsyncWithHttpInfo($process_instance_ids, $business_key, $business_key_like, $case_instance_id, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_key_not_in, $deployment_id, $super_process_instance, $sub_process_instance, $super_case_instance, $sub_case_instance, $active, $suspended, $with_incident, $incident_id, $incident_type, $incident_message, $incident_message_like, $tenant_id_in, $without_tenant_id, $process_definition_without_tenant_id, $activity_id_in, $root_process_instances, $leaf_process_instances, $variables, $variable_names_ignore_case, $variable_values_ignore_case)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessInstancesCountAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $process_instance_ids Filter by a comma-separated list of process instance ids. (optional)
     * @param  string $business_key Filter by process instance business key. (optional)
     * @param  string $business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $process_definition_id Filter by the deployment the id belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys. (optional)
     * @param  string $process_definition_key_not_in Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  string $super_process_instance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id. (optional)
     * @param  string $super_case_instance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id. (optional)
     * @param  bool $active Only include active process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $with_incident Filter by presence of incidents. Selects only process instances that have an incident. (optional, default to false)
     * @param  string $incident_id Filter by the incident id. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include process instances which belong to no tenant. (optional, default to false)
     * @param  bool $process_definition_without_tenant_id Only include process instances which process definition has no tenant id. (optional, default to false)
     * @param  string $activity_id_in Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional, default to false)
     * @param  bool $leaf_process_instances Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances). (optional, default to false)
     * @param  string $variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (optional, default to false)
     * @param  bool $variable_values_ignore_case Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessInstancesCountAsyncWithHttpInfo($process_instance_ids = null, $business_key = null, $business_key_like = null, $case_instance_id = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_key_not_in = null, $deployment_id = null, $super_process_instance = null, $sub_process_instance = null, $super_case_instance = null, $sub_case_instance = null, $active = false, $suspended = false, $with_incident = false, $incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $tenant_id_in = null, $without_tenant_id = false, $process_definition_without_tenant_id = false, $activity_id_in = null, $root_process_instances = false, $leaf_process_instances = false, $variables = null, $variable_names_ignore_case = false, $variable_values_ignore_case = false)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\CountResultDto';
        $request = $this->getProcessInstancesCountRequest($process_instance_ids, $business_key, $business_key_like, $case_instance_id, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_key_not_in, $deployment_id, $super_process_instance, $sub_process_instance, $super_case_instance, $sub_case_instance, $active, $suspended, $with_incident, $incident_id, $incident_type, $incident_message, $incident_message_like, $tenant_id_in, $without_tenant_id, $process_definition_without_tenant_id, $activity_id_in, $root_process_instances, $leaf_process_instances, $variables, $variable_names_ignore_case, $variable_values_ignore_case);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessInstancesCount'
     *
     * @param  string $process_instance_ids Filter by a comma-separated list of process instance ids. (optional)
     * @param  string $business_key Filter by process instance business key. (optional)
     * @param  string $business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  string $case_instance_id Filter by case instance id. (optional)
     * @param  string $process_definition_id Filter by the deployment the id belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a comma-separated list of process definition keys. A process instance must have one of the given process definition keys. (optional)
     * @param  string $process_definition_key_not_in Exclude instances by a comma-separated list of process definition keys. A process instance must not have one of the given process definition keys. (optional)
     * @param  string $deployment_id Filter by the deployment the id belongs to. (optional)
     * @param  string $super_process_instance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id. (optional)
     * @param  string $super_case_instance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id. (optional)
     * @param  bool $active Only include active process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $suspended Only include suspended process instances. Value may only be true, as false is the default behavior. (optional, default to false)
     * @param  bool $with_incident Filter by presence of incidents. Selects only process instances that have an incident. (optional, default to false)
     * @param  string $incident_id Filter by the incident id. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A process instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include process instances which belong to no tenant. (optional, default to false)
     * @param  bool $process_definition_without_tenant_id Only include process instances which process definition has no tenant id. (optional, default to false)
     * @param  string $activity_id_in Filter by a comma-separated list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional, default to false)
     * @param  bool $leaf_process_instances Restrict the query to all process instances that are leaf instances. (i.e. don&#39;t have any sub instances). (optional, default to false)
     * @param  string $variables Only include process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note**: Values are always treated as String objects on server side.  Valid &#x60;operator&#x60; values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;. &#x60;key&#x60; and &#x60;value&#x60; may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal. (optional, default to false)
     * @param  bool $variable_values_ignore_case Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProcessInstancesCountRequest($process_instance_ids = null, $business_key = null, $business_key_like = null, $case_instance_id = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_key_not_in = null, $deployment_id = null, $super_process_instance = null, $sub_process_instance = null, $super_case_instance = null, $sub_case_instance = null, $active = false, $suspended = false, $with_incident = false, $incident_id = null, $incident_type = null, $incident_message = null, $incident_message_like = null, $tenant_id_in = null, $without_tenant_id = false, $process_definition_without_tenant_id = false, $activity_id_in = null, $root_process_instances = false, $leaf_process_instances = false, $variables = null, $variable_names_ignore_case = false, $variable_values_ignore_case = false)
    {

        $resourcePath = '/process-instance/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($process_instance_ids !== null) {
            if('form' === 'form' && is_array($process_instance_ids)) {
                foreach($process_instance_ids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processInstanceIds'] = $process_instance_ids;
            }
        }
        // query params
        if ($business_key !== null) {
            if('form' === 'form' && is_array($business_key)) {
                foreach($business_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['businessKey'] = $business_key;
            }
        }
        // query params
        if ($business_key_like !== null) {
            if('form' === 'form' && is_array($business_key_like)) {
                foreach($business_key_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['businessKeyLike'] = $business_key_like;
            }
        }
        // query params
        if ($case_instance_id !== null) {
            if('form' === 'form' && is_array($case_instance_id)) {
                foreach($case_instance_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['caseInstanceId'] = $case_instance_id;
            }
        }
        // query params
        if ($process_definition_id !== null) {
            if('form' === 'form' && is_array($process_definition_id)) {
                foreach($process_definition_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionId'] = $process_definition_id;
            }
        }
        // query params
        if ($process_definition_key !== null) {
            if('form' === 'form' && is_array($process_definition_key)) {
                foreach($process_definition_key as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKey'] = $process_definition_key;
            }
        }
        // query params
        if ($process_definition_key_in !== null) {
            if('form' === 'form' && is_array($process_definition_key_in)) {
                foreach($process_definition_key_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKeyIn'] = $process_definition_key_in;
            }
        }
        // query params
        if ($process_definition_key_not_in !== null) {
            if('form' === 'form' && is_array($process_definition_key_not_in)) {
                foreach($process_definition_key_not_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionKeyNotIn'] = $process_definition_key_not_in;
            }
        }
        // query params
        if ($deployment_id !== null) {
            if('form' === 'form' && is_array($deployment_id)) {
                foreach($deployment_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['deploymentId'] = $deployment_id;
            }
        }
        // query params
        if ($super_process_instance !== null) {
            if('form' === 'form' && is_array($super_process_instance)) {
                foreach($super_process_instance as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['superProcessInstance'] = $super_process_instance;
            }
        }
        // query params
        if ($sub_process_instance !== null) {
            if('form' === 'form' && is_array($sub_process_instance)) {
                foreach($sub_process_instance as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subProcessInstance'] = $sub_process_instance;
            }
        }
        // query params
        if ($super_case_instance !== null) {
            if('form' === 'form' && is_array($super_case_instance)) {
                foreach($super_case_instance as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['superCaseInstance'] = $super_case_instance;
            }
        }
        // query params
        if ($sub_case_instance !== null) {
            if('form' === 'form' && is_array($sub_case_instance)) {
                foreach($sub_case_instance as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['subCaseInstance'] = $sub_case_instance;
            }
        }
        // query params
        if ($active !== null) {
            if('form' === 'form' && is_array($active)) {
                foreach($active as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['active'] = $active;
            }
        }
        // query params
        if ($suspended !== null) {
            if('form' === 'form' && is_array($suspended)) {
                foreach($suspended as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['suspended'] = $suspended;
            }
        }
        // query params
        if ($with_incident !== null) {
            if('form' === 'form' && is_array($with_incident)) {
                foreach($with_incident as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withIncident'] = $with_incident;
            }
        }
        // query params
        if ($incident_id !== null) {
            if('form' === 'form' && is_array($incident_id)) {
                foreach($incident_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentId'] = $incident_id;
            }
        }
        // query params
        if ($incident_type !== null) {
            if('form' === 'form' && is_array($incident_type)) {
                foreach($incident_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentType'] = $incident_type;
            }
        }
        // query params
        if ($incident_message !== null) {
            if('form' === 'form' && is_array($incident_message)) {
                foreach($incident_message as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentMessage'] = $incident_message;
            }
        }
        // query params
        if ($incident_message_like !== null) {
            if('form' === 'form' && is_array($incident_message_like)) {
                foreach($incident_message_like as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['incidentMessageLike'] = $incident_message_like;
            }
        }
        // query params
        if ($tenant_id_in !== null) {
            if('form' === 'form' && is_array($tenant_id_in)) {
                foreach($tenant_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tenantIdIn'] = $tenant_id_in;
            }
        }
        // query params
        if ($without_tenant_id !== null) {
            if('form' === 'form' && is_array($without_tenant_id)) {
                foreach($without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['withoutTenantId'] = $without_tenant_id;
            }
        }
        // query params
        if ($process_definition_without_tenant_id !== null) {
            if('form' === 'form' && is_array($process_definition_without_tenant_id)) {
                foreach($process_definition_without_tenant_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['processDefinitionWithoutTenantId'] = $process_definition_without_tenant_id;
            }
        }
        // query params
        if ($activity_id_in !== null) {
            if('form' === 'form' && is_array($activity_id_in)) {
                foreach($activity_id_in as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['activityIdIn'] = $activity_id_in;
            }
        }
        // query params
        if ($root_process_instances !== null) {
            if('form' === 'form' && is_array($root_process_instances)) {
                foreach($root_process_instances as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['rootProcessInstances'] = $root_process_instances;
            }
        }
        // query params
        if ($leaf_process_instances !== null) {
            if('form' === 'form' && is_array($leaf_process_instances)) {
                foreach($leaf_process_instances as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['leafProcessInstances'] = $leaf_process_instances;
            }
        }
        // query params
        if ($variables !== null) {
            if('form' === 'form' && is_array($variables)) {
                foreach($variables as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variables'] = $variables;
            }
        }
        // query params
        if ($variable_names_ignore_case !== null) {
            if('form' === 'form' && is_array($variable_names_ignore_case)) {
                foreach($variable_names_ignore_case as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableNamesIgnoreCase'] = $variable_names_ignore_case;
            }
        }
        // query params
        if ($variable_values_ignore_case !== null) {
            if('form' === 'form' && is_array($variable_values_ignore_case)) {
                foreach($variable_values_ignore_case as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['variableValuesIgnoreCase'] = $variable_values_ignore_case;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifyProcessInstance
     *
     * @param  string $id The id of the process instance to modify. (required)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceModificationDto $process_instance_modification_dto process_instance_modification_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function modifyProcessInstance($id, $process_instance_modification_dto = null)
    {
        $this->modifyProcessInstanceWithHttpInfo($id, $process_instance_modification_dto);
    }

    /**
     * Operation modifyProcessInstanceWithHttpInfo
     *
     * @param  string $id The id of the process instance to modify. (required)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceModificationDto $process_instance_modification_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyProcessInstanceWithHttpInfo($id, $process_instance_modification_dto = null)
    {
        $request = $this->modifyProcessInstanceRequest($id, $process_instance_modification_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modifyProcessInstanceAsync
     *
     * 
     *
     * @param  string $id The id of the process instance to modify. (required)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceModificationDto $process_instance_modification_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyProcessInstanceAsync($id, $process_instance_modification_dto = null)
    {
        return $this->modifyProcessInstanceAsyncWithHttpInfo($id, $process_instance_modification_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyProcessInstanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id of the process instance to modify. (required)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceModificationDto $process_instance_modification_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyProcessInstanceAsyncWithHttpInfo($id, $process_instance_modification_dto = null)
    {
        $returnType = '';
        $request = $this->modifyProcessInstanceRequest($id, $process_instance_modification_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyProcessInstance'
     *
     * @param  string $id The id of the process instance to modify. (required)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceModificationDto $process_instance_modification_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function modifyProcessInstanceRequest($id, $process_instance_modification_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling modifyProcessInstance'
            );
        }

        $resourcePath = '/process-instance/{id}/modification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($process_instance_modification_dto)) {
            $_tempBody = $process_instance_modification_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifyProcessInstanceAsyncOperation
     *
     * @param  string $id The id of the process instance to modify. (required)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceModificationDto $process_instance_modification_dto process_instance_modification_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\BatchDto|\StrehleDe\CamundaClient\Model\ExceptionDto|\StrehleDe\CamundaClient\Model\AuthorizationExceptionDto|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function modifyProcessInstanceAsyncOperation($id, $process_instance_modification_dto = null)
    {
        list($response) = $this->modifyProcessInstanceAsyncOperationWithHttpInfo($id, $process_instance_modification_dto);
        return $response;
    }

    /**
     * Operation modifyProcessInstanceAsyncOperationWithHttpInfo
     *
     * @param  string $id The id of the process instance to modify. (required)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceModificationDto $process_instance_modification_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\BatchDto|\StrehleDe\CamundaClient\Model\ExceptionDto|\StrehleDe\CamundaClient\Model\AuthorizationExceptionDto|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyProcessInstanceAsyncOperationWithHttpInfo($id, $process_instance_modification_dto = null)
    {
        $request = $this->modifyProcessInstanceAsyncOperationRequest($id, $process_instance_modification_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\BatchDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\BatchDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\StrehleDe\CamundaClient\Model\AuthorizationExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\AuthorizationExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\BatchDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\AuthorizationExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modifyProcessInstanceAsyncOperationAsync
     *
     * 
     *
     * @param  string $id The id of the process instance to modify. (required)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceModificationDto $process_instance_modification_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyProcessInstanceAsyncOperationAsync($id, $process_instance_modification_dto = null)
    {
        return $this->modifyProcessInstanceAsyncOperationAsyncWithHttpInfo($id, $process_instance_modification_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyProcessInstanceAsyncOperationAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id of the process instance to modify. (required)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceModificationDto $process_instance_modification_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyProcessInstanceAsyncOperationAsyncWithHttpInfo($id, $process_instance_modification_dto = null)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\BatchDto';
        $request = $this->modifyProcessInstanceAsyncOperationRequest($id, $process_instance_modification_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyProcessInstanceAsyncOperation'
     *
     * @param  string $id The id of the process instance to modify. (required)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceModificationDto $process_instance_modification_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function modifyProcessInstanceAsyncOperationRequest($id, $process_instance_modification_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling modifyProcessInstanceAsyncOperation'
            );
        }

        $resourcePath = '/process-instance/{id}/modification-async';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($process_instance_modification_dto)) {
            $_tempBody = $process_instance_modification_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifyProcessInstanceVariables
     *
     * @param  string $id The id of the process instance to set variables for. (required)
     * @param  \StrehleDe\CamundaClient\Model\PatchVariablesDto $patch_variables_dto patch_variables_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function modifyProcessInstanceVariables($id, $patch_variables_dto = null)
    {
        $this->modifyProcessInstanceVariablesWithHttpInfo($id, $patch_variables_dto);
    }

    /**
     * Operation modifyProcessInstanceVariablesWithHttpInfo
     *
     * @param  string $id The id of the process instance to set variables for. (required)
     * @param  \StrehleDe\CamundaClient\Model\PatchVariablesDto $patch_variables_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function modifyProcessInstanceVariablesWithHttpInfo($id, $patch_variables_dto = null)
    {
        $request = $this->modifyProcessInstanceVariablesRequest($id, $patch_variables_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modifyProcessInstanceVariablesAsync
     *
     * 
     *
     * @param  string $id The id of the process instance to set variables for. (required)
     * @param  \StrehleDe\CamundaClient\Model\PatchVariablesDto $patch_variables_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyProcessInstanceVariablesAsync($id, $patch_variables_dto = null)
    {
        return $this->modifyProcessInstanceVariablesAsyncWithHttpInfo($id, $patch_variables_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modifyProcessInstanceVariablesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id of the process instance to set variables for. (required)
     * @param  \StrehleDe\CamundaClient\Model\PatchVariablesDto $patch_variables_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modifyProcessInstanceVariablesAsyncWithHttpInfo($id, $patch_variables_dto = null)
    {
        $returnType = '';
        $request = $this->modifyProcessInstanceVariablesRequest($id, $patch_variables_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifyProcessInstanceVariables'
     *
     * @param  string $id The id of the process instance to set variables for. (required)
     * @param  \StrehleDe\CamundaClient\Model\PatchVariablesDto $patch_variables_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function modifyProcessInstanceVariablesRequest($id, $patch_variables_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling modifyProcessInstanceVariables'
            );
        }

        $resourcePath = '/process-instance/{id}/variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($patch_variables_dto)) {
            $_tempBody = $patch_variables_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryProcessInstances
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceQueryDto $process_instance_query_dto process_instance_query_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\ProcessInstanceDto[]|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function queryProcessInstances($first_result = null, $max_results = null, $process_instance_query_dto = null)
    {
        list($response) = $this->queryProcessInstancesWithHttpInfo($first_result, $max_results, $process_instance_query_dto);
        return $response;
    }

    /**
     * Operation queryProcessInstancesWithHttpInfo
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceQueryDto $process_instance_query_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\ProcessInstanceDto[]|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryProcessInstancesWithHttpInfo($first_result = null, $max_results = null, $process_instance_query_dto = null)
    {
        $request = $this->queryProcessInstancesRequest($first_result, $max_results, $process_instance_query_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\ProcessInstanceDto[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ProcessInstanceDto[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\ProcessInstanceDto[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ProcessInstanceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryProcessInstancesAsync
     *
     * 
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceQueryDto $process_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProcessInstancesAsync($first_result = null, $max_results = null, $process_instance_query_dto = null)
    {
        return $this->queryProcessInstancesAsyncWithHttpInfo($first_result, $max_results, $process_instance_query_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryProcessInstancesAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceQueryDto $process_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProcessInstancesAsyncWithHttpInfo($first_result = null, $max_results = null, $process_instance_query_dto = null)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\ProcessInstanceDto[]';
        $request = $this->queryProcessInstancesRequest($first_result, $max_results, $process_instance_query_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryProcessInstances'
     *
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceQueryDto $process_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryProcessInstancesRequest($first_result = null, $max_results = null, $process_instance_query_dto = null)
    {

        $resourcePath = '/process-instance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_result !== null) {
            if('form' === 'form' && is_array($first_result)) {
                foreach($first_result as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['firstResult'] = $first_result;
            }
        }
        // query params
        if ($max_results !== null) {
            if('form' === 'form' && is_array($max_results)) {
                foreach($max_results as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['maxResults'] = $max_results;
            }
        }



        // body params
        $_tempBody = null;
        if (isset($process_instance_query_dto)) {
            $_tempBody = $process_instance_query_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryProcessInstancesCount
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceQueryDto $process_instance_query_dto process_instance_query_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\CountResultDto|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function queryProcessInstancesCount($process_instance_query_dto = null)
    {
        list($response) = $this->queryProcessInstancesCountWithHttpInfo($process_instance_query_dto);
        return $response;
    }

    /**
     * Operation queryProcessInstancesCountWithHttpInfo
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceQueryDto $process_instance_query_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\CountResultDto|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryProcessInstancesCountWithHttpInfo($process_instance_query_dto = null)
    {
        $request = $this->queryProcessInstancesCountRequest($process_instance_query_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\CountResultDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\CountResultDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\CountResultDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryProcessInstancesCountAsync
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceQueryDto $process_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProcessInstancesCountAsync($process_instance_query_dto = null)
    {
        return $this->queryProcessInstancesCountAsyncWithHttpInfo($process_instance_query_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryProcessInstancesCountAsyncWithHttpInfo
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceQueryDto $process_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryProcessInstancesCountAsyncWithHttpInfo($process_instance_query_dto = null)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\CountResultDto';
        $request = $this->queryProcessInstancesCountRequest($process_instance_query_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryProcessInstancesCount'
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceQueryDto $process_instance_query_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryProcessInstancesCountRequest($process_instance_query_dto = null)
    {

        $resourcePath = '/process-instance/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($process_instance_query_dto)) {
            $_tempBody = $process_instance_query_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setProcessInstanceVariable
     *
     * @param  string $id The id of the process instance to set the variable for. (required)
     * @param  string $var_name The name of the variable to set. (required)
     * @param  \StrehleDe\CamundaClient\Model\VariableValueDto $variable_value_dto variable_value_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setProcessInstanceVariable($id, $var_name, $variable_value_dto = null)
    {
        $this->setProcessInstanceVariableWithHttpInfo($id, $var_name, $variable_value_dto);
    }

    /**
     * Operation setProcessInstanceVariableWithHttpInfo
     *
     * @param  string $id The id of the process instance to set the variable for. (required)
     * @param  string $var_name The name of the variable to set. (required)
     * @param  \StrehleDe\CamundaClient\Model\VariableValueDto $variable_value_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setProcessInstanceVariableWithHttpInfo($id, $var_name, $variable_value_dto = null)
    {
        $request = $this->setProcessInstanceVariableRequest($id, $var_name, $variable_value_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setProcessInstanceVariableAsync
     *
     * 
     *
     * @param  string $id The id of the process instance to set the variable for. (required)
     * @param  string $var_name The name of the variable to set. (required)
     * @param  \StrehleDe\CamundaClient\Model\VariableValueDto $variable_value_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProcessInstanceVariableAsync($id, $var_name, $variable_value_dto = null)
    {
        return $this->setProcessInstanceVariableAsyncWithHttpInfo($id, $var_name, $variable_value_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setProcessInstanceVariableAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id of the process instance to set the variable for. (required)
     * @param  string $var_name The name of the variable to set. (required)
     * @param  \StrehleDe\CamundaClient\Model\VariableValueDto $variable_value_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProcessInstanceVariableAsyncWithHttpInfo($id, $var_name, $variable_value_dto = null)
    {
        $returnType = '';
        $request = $this->setProcessInstanceVariableRequest($id, $var_name, $variable_value_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setProcessInstanceVariable'
     *
     * @param  string $id The id of the process instance to set the variable for. (required)
     * @param  string $var_name The name of the variable to set. (required)
     * @param  \StrehleDe\CamundaClient\Model\VariableValueDto $variable_value_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setProcessInstanceVariableRequest($id, $var_name, $variable_value_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling setProcessInstanceVariable'
            );
        }
        // verify the required parameter 'var_name' is set
        if ($var_name === null || (is_array($var_name) && count($var_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $var_name when calling setProcessInstanceVariable'
            );
        }

        $resourcePath = '/process-instance/{id}/variables/{varName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($var_name !== null) {
            $resourcePath = str_replace(
                '{' . 'varName' . '}',
                ObjectSerializer::toPathValue($var_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($variable_value_dto)) {
            $_tempBody = $variable_value_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setProcessInstanceVariableBinary
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     * @param  \SplFileObject $data The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)
     * @param  string $value_type The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setProcessInstanceVariableBinary($id, $var_name, $data = null, $value_type = null)
    {
        $this->setProcessInstanceVariableBinaryWithHttpInfo($id, $var_name, $data, $value_type);
    }

    /**
     * Operation setProcessInstanceVariableBinaryWithHttpInfo
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     * @param  \SplFileObject $data The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)
     * @param  string $value_type The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setProcessInstanceVariableBinaryWithHttpInfo($id, $var_name, $data = null, $value_type = null)
    {
        $request = $this->setProcessInstanceVariableBinaryRequest($id, $var_name, $data, $value_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setProcessInstanceVariableBinaryAsync
     *
     * 
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     * @param  \SplFileObject $data The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)
     * @param  string $value_type The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProcessInstanceVariableBinaryAsync($id, $var_name, $data = null, $value_type = null)
    {
        return $this->setProcessInstanceVariableBinaryAsyncWithHttpInfo($id, $var_name, $data, $value_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setProcessInstanceVariableBinaryAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     * @param  \SplFileObject $data The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)
     * @param  string $value_type The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setProcessInstanceVariableBinaryAsyncWithHttpInfo($id, $var_name, $data = null, $value_type = null)
    {
        $returnType = '';
        $request = $this->setProcessInstanceVariableBinaryRequest($id, $var_name, $data, $value_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setProcessInstanceVariableBinary'
     *
     * @param  string $id The id of the process instance to retrieve the variable for. (required)
     * @param  string $var_name The name of the variable to retrieve. (required)
     * @param  \SplFileObject $data The binary data to be set. For File variables, this multipart can contain the filename, binary value and MIME type of the file variable to be set Only the filename is mandatory. (optional)
     * @param  string $value_type The name of the variable type. Either Bytes for a byte array variable or File for a file variable. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setProcessInstanceVariableBinaryRequest($id, $var_name, $data = null, $value_type = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling setProcessInstanceVariableBinary'
            );
        }
        // verify the required parameter 'var_name' is set
        if ($var_name === null || (is_array($var_name) && count($var_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $var_name when calling setProcessInstanceVariableBinary'
            );
        }

        $resourcePath = '/process-instance/{id}/variables/{varName}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($var_name !== null) {
            $resourcePath = str_replace(
                '{' . 'varName' . '}',
                ObjectSerializer::toPathValue($var_name),
                $resourcePath
            );
        }

        // form params
        if ($data !== null) {
            $multipart = true;
            $formParams['data'] = [];
            $paramFiles = is_array($data) ? $data : [$data];
            foreach ($paramFiles as $paramFile) {
                $formParams['data'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }
        // form params
        if ($value_type !== null) {
            $formParams['valueType'] = ObjectSerializer::toFormValue($value_type);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setRetriesByProcess
     *
     * @param  \StrehleDe\CamundaClient\Model\SetJobRetriesByProcessDto $set_job_retries_by_process_dto Please note that if both processInstances and processInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60; (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\BatchDto|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function setRetriesByProcess($set_job_retries_by_process_dto = null)
    {
        list($response) = $this->setRetriesByProcessWithHttpInfo($set_job_retries_by_process_dto);
        return $response;
    }

    /**
     * Operation setRetriesByProcessWithHttpInfo
     *
     * @param  \StrehleDe\CamundaClient\Model\SetJobRetriesByProcessDto $set_job_retries_by_process_dto Please note that if both processInstances and processInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60; (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\BatchDto|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function setRetriesByProcessWithHttpInfo($set_job_retries_by_process_dto = null)
    {
        $request = $this->setRetriesByProcessRequest($set_job_retries_by_process_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\BatchDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\BatchDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\BatchDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setRetriesByProcessAsync
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\SetJobRetriesByProcessDto $set_job_retries_by_process_dto Please note that if both processInstances and processInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRetriesByProcessAsync($set_job_retries_by_process_dto = null)
    {
        return $this->setRetriesByProcessAsyncWithHttpInfo($set_job_retries_by_process_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setRetriesByProcessAsyncWithHttpInfo
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\SetJobRetriesByProcessDto $set_job_retries_by_process_dto Please note that if both processInstances and processInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRetriesByProcessAsyncWithHttpInfo($set_job_retries_by_process_dto = null)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\BatchDto';
        $request = $this->setRetriesByProcessRequest($set_job_retries_by_process_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setRetriesByProcess'
     *
     * @param  \StrehleDe\CamundaClient\Model\SetJobRetriesByProcessDto $set_job_retries_by_process_dto Please note that if both processInstances and processInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;historicProcessInstanceQuery&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setRetriesByProcessRequest($set_job_retries_by_process_dto = null)
    {

        $resourcePath = '/process-instance/job-retries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($set_job_retries_by_process_dto)) {
            $_tempBody = $set_job_retries_by_process_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setRetriesByProcessHistoricQueryBased
     *
     * @param  \StrehleDe\CamundaClient\Model\SetJobRetriesByProcessDto $set_job_retries_by_process_dto Please note that if both processInstances and historicProcessInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;processInstanceQuery&#x60; (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\BatchDto|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function setRetriesByProcessHistoricQueryBased($set_job_retries_by_process_dto = null)
    {
        list($response) = $this->setRetriesByProcessHistoricQueryBasedWithHttpInfo($set_job_retries_by_process_dto);
        return $response;
    }

    /**
     * Operation setRetriesByProcessHistoricQueryBasedWithHttpInfo
     *
     * @param  \StrehleDe\CamundaClient\Model\SetJobRetriesByProcessDto $set_job_retries_by_process_dto Please note that if both processInstances and historicProcessInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;processInstanceQuery&#x60; (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\BatchDto|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function setRetriesByProcessHistoricQueryBasedWithHttpInfo($set_job_retries_by_process_dto = null)
    {
        $request = $this->setRetriesByProcessHistoricQueryBasedRequest($set_job_retries_by_process_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\BatchDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\BatchDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\BatchDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setRetriesByProcessHistoricQueryBasedAsync
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\SetJobRetriesByProcessDto $set_job_retries_by_process_dto Please note that if both processInstances and historicProcessInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;processInstanceQuery&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRetriesByProcessHistoricQueryBasedAsync($set_job_retries_by_process_dto = null)
    {
        return $this->setRetriesByProcessHistoricQueryBasedAsyncWithHttpInfo($set_job_retries_by_process_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setRetriesByProcessHistoricQueryBasedAsyncWithHttpInfo
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\SetJobRetriesByProcessDto $set_job_retries_by_process_dto Please note that if both processInstances and historicProcessInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;processInstanceQuery&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRetriesByProcessHistoricQueryBasedAsyncWithHttpInfo($set_job_retries_by_process_dto = null)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\BatchDto';
        $request = $this->setRetriesByProcessHistoricQueryBasedRequest($set_job_retries_by_process_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setRetriesByProcessHistoricQueryBased'
     *
     * @param  \StrehleDe\CamundaClient\Model\SetJobRetriesByProcessDto $set_job_retries_by_process_dto Please note that if both processInstances and historicProcessInstanceQuery are provided, then the resulting execution will be performed on the union of these sets. **Unallowed property**: &#x60;processInstanceQuery&#x60; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setRetriesByProcessHistoricQueryBasedRequest($set_job_retries_by_process_dto = null)
    {

        $resourcePath = '/process-instance/job-retries-historic-query-based';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($set_job_retries_by_process_dto)) {
            $_tempBody = $set_job_retries_by_process_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSuspensionState
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceSuspensionStateDto $process_instance_suspension_state_dto process_instance_suspension_state_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateSuspensionState($process_instance_suspension_state_dto = null)
    {
        $this->updateSuspensionStateWithHttpInfo($process_instance_suspension_state_dto);
    }

    /**
     * Operation updateSuspensionStateWithHttpInfo
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceSuspensionStateDto $process_instance_suspension_state_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSuspensionStateWithHttpInfo($process_instance_suspension_state_dto = null)
    {
        $request = $this->updateSuspensionStateRequest($process_instance_suspension_state_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSuspensionStateAsync
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceSuspensionStateDto $process_instance_suspension_state_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSuspensionStateAsync($process_instance_suspension_state_dto = null)
    {
        return $this->updateSuspensionStateAsyncWithHttpInfo($process_instance_suspension_state_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSuspensionStateAsyncWithHttpInfo
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceSuspensionStateDto $process_instance_suspension_state_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSuspensionStateAsyncWithHttpInfo($process_instance_suspension_state_dto = null)
    {
        $returnType = '';
        $request = $this->updateSuspensionStateRequest($process_instance_suspension_state_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSuspensionState'
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceSuspensionStateDto $process_instance_suspension_state_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSuspensionStateRequest($process_instance_suspension_state_dto = null)
    {

        $resourcePath = '/process-instance/suspended';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($process_instance_suspension_state_dto)) {
            $_tempBody = $process_instance_suspension_state_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSuspensionStateAsyncOperation
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceSuspensionStateAsyncDto $process_instance_suspension_state_async_dto process_instance_suspension_state_async_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \StrehleDe\CamundaClient\Model\BatchDto|\StrehleDe\CamundaClient\Model\ExceptionDto
     */
    public function updateSuspensionStateAsyncOperation($process_instance_suspension_state_async_dto = null)
    {
        list($response) = $this->updateSuspensionStateAsyncOperationWithHttpInfo($process_instance_suspension_state_async_dto);
        return $response;
    }

    /**
     * Operation updateSuspensionStateAsyncOperationWithHttpInfo
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceSuspensionStateAsyncDto $process_instance_suspension_state_async_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \StrehleDe\CamundaClient\Model\BatchDto|\StrehleDe\CamundaClient\Model\ExceptionDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSuspensionStateAsyncOperationWithHttpInfo($process_instance_suspension_state_async_dto = null)
    {
        $request = $this->updateSuspensionStateAsyncOperationRequest($process_instance_suspension_state_async_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\StrehleDe\CamundaClient\Model\BatchDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\BatchDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\StrehleDe\CamundaClient\Model\ExceptionDto' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\StrehleDe\CamundaClient\Model\ExceptionDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\StrehleDe\CamundaClient\Model\BatchDto';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\StrehleDe\CamundaClient\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSuspensionStateAsyncOperationAsync
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceSuspensionStateAsyncDto $process_instance_suspension_state_async_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSuspensionStateAsyncOperationAsync($process_instance_suspension_state_async_dto = null)
    {
        return $this->updateSuspensionStateAsyncOperationAsyncWithHttpInfo($process_instance_suspension_state_async_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSuspensionStateAsyncOperationAsyncWithHttpInfo
     *
     * 
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceSuspensionStateAsyncDto $process_instance_suspension_state_async_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSuspensionStateAsyncOperationAsyncWithHttpInfo($process_instance_suspension_state_async_dto = null)
    {
        $returnType = '\StrehleDe\CamundaClient\Model\BatchDto';
        $request = $this->updateSuspensionStateAsyncOperationRequest($process_instance_suspension_state_async_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSuspensionStateAsyncOperation'
     *
     * @param  \StrehleDe\CamundaClient\Model\ProcessInstanceSuspensionStateAsyncDto $process_instance_suspension_state_async_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSuspensionStateAsyncOperationRequest($process_instance_suspension_state_async_dto = null)
    {

        $resourcePath = '/process-instance/suspended-async';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($process_instance_suspension_state_async_dto)) {
            $_tempBody = $process_instance_suspension_state_async_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSuspensionStateById
     *
     * @param  string $id The id of the process instance to activate or suspend. (required)
     * @param  \StrehleDe\CamundaClient\Model\SuspensionStateDto $suspension_state_dto suspension_state_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateSuspensionStateById($id, $suspension_state_dto = null)
    {
        $this->updateSuspensionStateByIdWithHttpInfo($id, $suspension_state_dto);
    }

    /**
     * Operation updateSuspensionStateByIdWithHttpInfo
     *
     * @param  string $id The id of the process instance to activate or suspend. (required)
     * @param  \StrehleDe\CamundaClient\Model\SuspensionStateDto $suspension_state_dto (optional)
     *
     * @throws \StrehleDe\CamundaClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSuspensionStateByIdWithHttpInfo($id, $suspension_state_dto = null)
    {
        $request = $this->updateSuspensionStateByIdRequest($id, $suspension_state_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateSuspensionStateByIdAsync
     *
     * 
     *
     * @param  string $id The id of the process instance to activate or suspend. (required)
     * @param  \StrehleDe\CamundaClient\Model\SuspensionStateDto $suspension_state_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSuspensionStateByIdAsync($id, $suspension_state_dto = null)
    {
        return $this->updateSuspensionStateByIdAsyncWithHttpInfo($id, $suspension_state_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSuspensionStateByIdAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $id The id of the process instance to activate or suspend. (required)
     * @param  \StrehleDe\CamundaClient\Model\SuspensionStateDto $suspension_state_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSuspensionStateByIdAsyncWithHttpInfo($id, $suspension_state_dto = null)
    {
        $returnType = '';
        $request = $this->updateSuspensionStateByIdRequest($id, $suspension_state_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSuspensionStateById'
     *
     * @param  string $id The id of the process instance to activate or suspend. (required)
     * @param  \StrehleDe\CamundaClient\Model\SuspensionStateDto $suspension_state_dto (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSuspensionStateByIdRequest($id, $suspension_state_dto = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateSuspensionStateById'
            );
        }

        $resourcePath = '/process-instance/{id}/suspended';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($suspension_state_dto)) {
            $_tempBody = $suspension_state_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
