<?php
/**
 * DecisionDefinitionDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  StrehleDe\CamundaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StrehleDe\CamundaClient\Model;

use \ArrayAccess;
use \StrehleDe\CamundaClient\ObjectSerializer;

/**
 * DecisionDefinitionDto Class Doc Comment
 *
 * @category Class
 * @package  StrehleDe\CamundaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DecisionDefinitionDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DecisionDefinitionDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'key' => 'string',
        'category' => 'string',
        'name' => 'string',
        'version' => 'int',
        'resource' => 'string',
        'deployment_id' => 'string',
        'tenant_id' => 'string',
        'decision_requirements_definition_id' => 'string',
        'decision_requirements_definition_key' => 'string',
        'history_time_to_live' => 'int',
        'version_tag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => null,
        'key' => null,
        'category' => null,
        'name' => null,
        'version' => 'int32',
        'resource' => null,
        'deployment_id' => null,
        'tenant_id' => null,
        'decision_requirements_definition_id' => null,
        'decision_requirements_definition_key' => null,
        'history_time_to_live' => 'int32',
        'version_tag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'key' => 'key',
        'category' => 'category',
        'name' => 'name',
        'version' => 'version',
        'resource' => 'resource',
        'deployment_id' => 'deploymentId',
        'tenant_id' => 'tenantId',
        'decision_requirements_definition_id' => 'decisionRequirementsDefinitionId',
        'decision_requirements_definition_key' => 'decisionRequirementsDefinitionKey',
        'history_time_to_live' => 'historyTimeToLive',
        'version_tag' => 'versionTag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'key' => 'setKey',
        'category' => 'setCategory',
        'name' => 'setName',
        'version' => 'setVersion',
        'resource' => 'setResource',
        'deployment_id' => 'setDeploymentId',
        'tenant_id' => 'setTenantId',
        'decision_requirements_definition_id' => 'setDecisionRequirementsDefinitionId',
        'decision_requirements_definition_key' => 'setDecisionRequirementsDefinitionKey',
        'history_time_to_live' => 'setHistoryTimeToLive',
        'version_tag' => 'setVersionTag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'key' => 'getKey',
        'category' => 'getCategory',
        'name' => 'getName',
        'version' => 'getVersion',
        'resource' => 'getResource',
        'deployment_id' => 'getDeploymentId',
        'tenant_id' => 'getTenantId',
        'decision_requirements_definition_id' => 'getDecisionRequirementsDefinitionId',
        'decision_requirements_definition_key' => 'getDecisionRequirementsDefinitionKey',
        'history_time_to_live' => 'getHistoryTimeToLive',
        'version_tag' => 'getVersionTag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['resource'] = isset($data['resource']) ? $data['resource'] : null;
        $this->container['deployment_id'] = isset($data['deployment_id']) ? $data['deployment_id'] : null;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
        $this->container['decision_requirements_definition_id'] = isset($data['decision_requirements_definition_id']) ? $data['decision_requirements_definition_id'] : null;
        $this->container['decision_requirements_definition_key'] = isset($data['decision_requirements_definition_key']) ? $data['decision_requirements_definition_key'] : null;
        $this->container['history_time_to_live'] = isset($data['history_time_to_live']) ? $data['history_time_to_live'] : null;
        $this->container['version_tag'] = isset($data['version_tag']) ? $data['version_tag'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['history_time_to_live']) && ($this->container['history_time_to_live'] < 0)) {
            $invalidProperties[] = "invalid value for 'history_time_to_live', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The id of the decision definition
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string|null
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string|null $key The key of the decision definition, i.e., the id of the DMN 1.0 XML decision definition.
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category The category of the decision definition.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the decision definition.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int|null $version The version of the decision definition that the engine assigned to it.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return string|null
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param string|null $resource The file name of the decision definition.
     *
     * @return $this
     */
    public function setResource($resource)
    {
        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets deployment_id
     *
     * @return string|null
     */
    public function getDeploymentId()
    {
        return $this->container['deployment_id'];
    }

    /**
     * Sets deployment_id
     *
     * @param string|null $deployment_id The deployment id of the decision definition.
     *
     * @return $this
     */
    public function setDeploymentId($deployment_id)
    {
        $this->container['deployment_id'] = $deployment_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id The tenant id of the decision definition.
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets decision_requirements_definition_id
     *
     * @return string|null
     */
    public function getDecisionRequirementsDefinitionId()
    {
        return $this->container['decision_requirements_definition_id'];
    }

    /**
     * Sets decision_requirements_definition_id
     *
     * @param string|null $decision_requirements_definition_id The id of the decision requirements definition this decision definition belongs to.
     *
     * @return $this
     */
    public function setDecisionRequirementsDefinitionId($decision_requirements_definition_id)
    {
        $this->container['decision_requirements_definition_id'] = $decision_requirements_definition_id;

        return $this;
    }

    /**
     * Gets decision_requirements_definition_key
     *
     * @return string|null
     */
    public function getDecisionRequirementsDefinitionKey()
    {
        return $this->container['decision_requirements_definition_key'];
    }

    /**
     * Sets decision_requirements_definition_key
     *
     * @param string|null $decision_requirements_definition_key The key of the decision requirements definition this decision definition belongs to.
     *
     * @return $this
     */
    public function setDecisionRequirementsDefinitionKey($decision_requirements_definition_key)
    {
        $this->container['decision_requirements_definition_key'] = $decision_requirements_definition_key;

        return $this;
    }

    /**
     * Gets history_time_to_live
     *
     * @return int|null
     */
    public function getHistoryTimeToLive()
    {
        return $this->container['history_time_to_live'];
    }

    /**
     * Sets history_time_to_live
     *
     * @param int|null $history_time_to_live History time to live value of the decision definition. Is used within [History cleanup](https://docs.camunda.org/manual/7.13/user-guide/process-engine/history/#history-cleanup).
     *
     * @return $this
     */
    public function setHistoryTimeToLive($history_time_to_live)
    {

        if (!is_null($history_time_to_live) && ($history_time_to_live < 0)) {
            throw new \InvalidArgumentException('invalid value for $history_time_to_live when calling DecisionDefinitionDto., must be bigger than or equal to 0.');
        }

        $this->container['history_time_to_live'] = $history_time_to_live;

        return $this;
    }

    /**
     * Gets version_tag
     *
     * @return string|null
     */
    public function getVersionTag()
    {
        return $this->container['version_tag'];
    }

    /**
     * Sets version_tag
     *
     * @param string|null $version_tag The version tag of the decision definition.
     *
     * @return $this
     */
    public function setVersionTag($version_tag)
    {
        $this->container['version_tag'] = $version_tag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


