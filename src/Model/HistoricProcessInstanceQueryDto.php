<?php
/**
 * HistoricProcessInstanceQueryDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  StrehleDe\CamundaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StrehleDe\CamundaClient\Model;

use \ArrayAccess;
use \StrehleDe\CamundaClient\ObjectSerializer;

/**
 * HistoricProcessInstanceQueryDto Class Doc Comment
 *
 * @category Class
 * @description A historic process instance query which defines a group of historic process instances
 * @package  StrehleDe\CamundaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HistoricProcessInstanceQueryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'HistoricProcessInstanceQueryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'process_instance_id' => 'string',
        'process_instance_ids' => 'string[]',
        'process_definition_id' => 'string',
        'process_definition_key' => 'string',
        'process_definition_key_in' => 'string[]',
        'process_definition_name' => 'string',
        'process_definition_name_like' => 'string',
        'process_definition_key_not_in' => 'string[]',
        'process_instance_business_key' => 'string',
        'process_instance_business_key_like' => 'string',
        'root_process_instances' => 'bool',
        'finished' => 'bool',
        'unfinished' => 'bool',
        'with_incidents' => 'bool',
        'with_root_incidents' => 'bool',
        'incident_type' => 'string',
        'incident_status' => 'string',
        'incident_message' => 'string',
        'incident_message_like' => 'string',
        'started_before' => '\DateTime',
        'started_after' => '\DateTime',
        'finished_before' => '\DateTime',
        'finished_after' => '\DateTime',
        'executed_activity_after' => '\DateTime',
        'executed_activity_before' => '\DateTime',
        'executed_job_after' => '\DateTime',
        'executed_job_before' => '\DateTime',
        'started_by' => 'string',
        'super_process_instance_id' => 'string',
        'sub_process_instance_id' => 'string',
        'super_case_instance_id' => 'string',
        'sub_case_instance_id' => 'string',
        'case_instance_id' => 'string',
        'tenant_id_in' => 'string[]',
        'without_tenant_id' => 'bool',
        'executed_activity_id_in' => 'string[]',
        'active_activity_id_in' => 'string[]',
        'active' => 'bool',
        'suspended' => 'bool',
        'completed' => 'bool',
        'externally_terminated' => 'bool',
        'internally_terminated' => 'bool',
        'variables' => '\StrehleDe\CamundaClient\Model\VariableQueryParameterDto[]',
        'variable_names_ignore_case' => 'bool',
        'variable_values_ignore_case' => 'bool',
        'or_queries' => '\StrehleDe\CamundaClient\Model\HistoricProcessInstanceQueryDto[]',
        'sorting' => '\StrehleDe\CamundaClient\Model\HistoricProcessInstanceQueryDtoSorting[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'process_instance_id' => null,
        'process_instance_ids' => null,
        'process_definition_id' => null,
        'process_definition_key' => null,
        'process_definition_key_in' => null,
        'process_definition_name' => null,
        'process_definition_name_like' => null,
        'process_definition_key_not_in' => null,
        'process_instance_business_key' => null,
        'process_instance_business_key_like' => null,
        'root_process_instances' => null,
        'finished' => null,
        'unfinished' => null,
        'with_incidents' => null,
        'with_root_incidents' => null,
        'incident_type' => null,
        'incident_status' => null,
        'incident_message' => null,
        'incident_message_like' => null,
        'started_before' => 'date-time',
        'started_after' => 'date-time',
        'finished_before' => 'date-time',
        'finished_after' => 'date-time',
        'executed_activity_after' => 'date-time',
        'executed_activity_before' => 'date-time',
        'executed_job_after' => 'date-time',
        'executed_job_before' => 'date-time',
        'started_by' => null,
        'super_process_instance_id' => null,
        'sub_process_instance_id' => null,
        'super_case_instance_id' => null,
        'sub_case_instance_id' => null,
        'case_instance_id' => null,
        'tenant_id_in' => null,
        'without_tenant_id' => null,
        'executed_activity_id_in' => null,
        'active_activity_id_in' => null,
        'active' => null,
        'suspended' => null,
        'completed' => null,
        'externally_terminated' => null,
        'internally_terminated' => null,
        'variables' => null,
        'variable_names_ignore_case' => null,
        'variable_values_ignore_case' => null,
        'or_queries' => null,
        'sorting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'process_instance_id' => 'processInstanceId',
        'process_instance_ids' => 'processInstanceIds',
        'process_definition_id' => 'processDefinitionId',
        'process_definition_key' => 'processDefinitionKey',
        'process_definition_key_in' => 'processDefinitionKeyIn',
        'process_definition_name' => 'processDefinitionName',
        'process_definition_name_like' => 'processDefinitionNameLike',
        'process_definition_key_not_in' => 'processDefinitionKeyNotIn',
        'process_instance_business_key' => 'processInstanceBusinessKey',
        'process_instance_business_key_like' => 'processInstanceBusinessKeyLike',
        'root_process_instances' => 'rootProcessInstances',
        'finished' => 'finished',
        'unfinished' => 'unfinished',
        'with_incidents' => 'withIncidents',
        'with_root_incidents' => 'withRootIncidents',
        'incident_type' => 'incidentType',
        'incident_status' => 'incidentStatus',
        'incident_message' => 'incidentMessage',
        'incident_message_like' => 'incidentMessageLike',
        'started_before' => 'startedBefore',
        'started_after' => 'startedAfter',
        'finished_before' => 'finishedBefore',
        'finished_after' => 'finishedAfter',
        'executed_activity_after' => 'executedActivityAfter',
        'executed_activity_before' => 'executedActivityBefore',
        'executed_job_after' => 'executedJobAfter',
        'executed_job_before' => 'executedJobBefore',
        'started_by' => 'startedBy',
        'super_process_instance_id' => 'superProcessInstanceId',
        'sub_process_instance_id' => 'subProcessInstanceId',
        'super_case_instance_id' => 'superCaseInstanceId',
        'sub_case_instance_id' => 'subCaseInstanceId',
        'case_instance_id' => 'caseInstanceId',
        'tenant_id_in' => 'tenantIdIn',
        'without_tenant_id' => 'withoutTenantId',
        'executed_activity_id_in' => 'executedActivityIdIn',
        'active_activity_id_in' => 'activeActivityIdIn',
        'active' => 'active',
        'suspended' => 'suspended',
        'completed' => 'completed',
        'externally_terminated' => 'externallyTerminated',
        'internally_terminated' => 'internallyTerminated',
        'variables' => 'variables',
        'variable_names_ignore_case' => 'variableNamesIgnoreCase',
        'variable_values_ignore_case' => 'variableValuesIgnoreCase',
        'or_queries' => 'orQueries',
        'sorting' => 'sorting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'process_instance_id' => 'setProcessInstanceId',
        'process_instance_ids' => 'setProcessInstanceIds',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_definition_key' => 'setProcessDefinitionKey',
        'process_definition_key_in' => 'setProcessDefinitionKeyIn',
        'process_definition_name' => 'setProcessDefinitionName',
        'process_definition_name_like' => 'setProcessDefinitionNameLike',
        'process_definition_key_not_in' => 'setProcessDefinitionKeyNotIn',
        'process_instance_business_key' => 'setProcessInstanceBusinessKey',
        'process_instance_business_key_like' => 'setProcessInstanceBusinessKeyLike',
        'root_process_instances' => 'setRootProcessInstances',
        'finished' => 'setFinished',
        'unfinished' => 'setUnfinished',
        'with_incidents' => 'setWithIncidents',
        'with_root_incidents' => 'setWithRootIncidents',
        'incident_type' => 'setIncidentType',
        'incident_status' => 'setIncidentStatus',
        'incident_message' => 'setIncidentMessage',
        'incident_message_like' => 'setIncidentMessageLike',
        'started_before' => 'setStartedBefore',
        'started_after' => 'setStartedAfter',
        'finished_before' => 'setFinishedBefore',
        'finished_after' => 'setFinishedAfter',
        'executed_activity_after' => 'setExecutedActivityAfter',
        'executed_activity_before' => 'setExecutedActivityBefore',
        'executed_job_after' => 'setExecutedJobAfter',
        'executed_job_before' => 'setExecutedJobBefore',
        'started_by' => 'setStartedBy',
        'super_process_instance_id' => 'setSuperProcessInstanceId',
        'sub_process_instance_id' => 'setSubProcessInstanceId',
        'super_case_instance_id' => 'setSuperCaseInstanceId',
        'sub_case_instance_id' => 'setSubCaseInstanceId',
        'case_instance_id' => 'setCaseInstanceId',
        'tenant_id_in' => 'setTenantIdIn',
        'without_tenant_id' => 'setWithoutTenantId',
        'executed_activity_id_in' => 'setExecutedActivityIdIn',
        'active_activity_id_in' => 'setActiveActivityIdIn',
        'active' => 'setActive',
        'suspended' => 'setSuspended',
        'completed' => 'setCompleted',
        'externally_terminated' => 'setExternallyTerminated',
        'internally_terminated' => 'setInternallyTerminated',
        'variables' => 'setVariables',
        'variable_names_ignore_case' => 'setVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'setVariableValuesIgnoreCase',
        'or_queries' => 'setOrQueries',
        'sorting' => 'setSorting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'process_instance_id' => 'getProcessInstanceId',
        'process_instance_ids' => 'getProcessInstanceIds',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_definition_key' => 'getProcessDefinitionKey',
        'process_definition_key_in' => 'getProcessDefinitionKeyIn',
        'process_definition_name' => 'getProcessDefinitionName',
        'process_definition_name_like' => 'getProcessDefinitionNameLike',
        'process_definition_key_not_in' => 'getProcessDefinitionKeyNotIn',
        'process_instance_business_key' => 'getProcessInstanceBusinessKey',
        'process_instance_business_key_like' => 'getProcessInstanceBusinessKeyLike',
        'root_process_instances' => 'getRootProcessInstances',
        'finished' => 'getFinished',
        'unfinished' => 'getUnfinished',
        'with_incidents' => 'getWithIncidents',
        'with_root_incidents' => 'getWithRootIncidents',
        'incident_type' => 'getIncidentType',
        'incident_status' => 'getIncidentStatus',
        'incident_message' => 'getIncidentMessage',
        'incident_message_like' => 'getIncidentMessageLike',
        'started_before' => 'getStartedBefore',
        'started_after' => 'getStartedAfter',
        'finished_before' => 'getFinishedBefore',
        'finished_after' => 'getFinishedAfter',
        'executed_activity_after' => 'getExecutedActivityAfter',
        'executed_activity_before' => 'getExecutedActivityBefore',
        'executed_job_after' => 'getExecutedJobAfter',
        'executed_job_before' => 'getExecutedJobBefore',
        'started_by' => 'getStartedBy',
        'super_process_instance_id' => 'getSuperProcessInstanceId',
        'sub_process_instance_id' => 'getSubProcessInstanceId',
        'super_case_instance_id' => 'getSuperCaseInstanceId',
        'sub_case_instance_id' => 'getSubCaseInstanceId',
        'case_instance_id' => 'getCaseInstanceId',
        'tenant_id_in' => 'getTenantIdIn',
        'without_tenant_id' => 'getWithoutTenantId',
        'executed_activity_id_in' => 'getExecutedActivityIdIn',
        'active_activity_id_in' => 'getActiveActivityIdIn',
        'active' => 'getActive',
        'suspended' => 'getSuspended',
        'completed' => 'getCompleted',
        'externally_terminated' => 'getExternallyTerminated',
        'internally_terminated' => 'getInternallyTerminated',
        'variables' => 'getVariables',
        'variable_names_ignore_case' => 'getVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'getVariableValuesIgnoreCase',
        'or_queries' => 'getOrQueries',
        'sorting' => 'getSorting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const INCIDENT_STATUS_OPEN = 'open';
    const INCIDENT_STATUS_RESOLVED = 'resolved';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIncidentStatusAllowableValues()
    {
        return [
            self::INCIDENT_STATUS_OPEN,
            self::INCIDENT_STATUS_RESOLVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['process_instance_id'] = isset($data['process_instance_id']) ? $data['process_instance_id'] : null;
        $this->container['process_instance_ids'] = isset($data['process_instance_ids']) ? $data['process_instance_ids'] : null;
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['process_definition_key'] = isset($data['process_definition_key']) ? $data['process_definition_key'] : null;
        $this->container['process_definition_key_in'] = isset($data['process_definition_key_in']) ? $data['process_definition_key_in'] : null;
        $this->container['process_definition_name'] = isset($data['process_definition_name']) ? $data['process_definition_name'] : null;
        $this->container['process_definition_name_like'] = isset($data['process_definition_name_like']) ? $data['process_definition_name_like'] : null;
        $this->container['process_definition_key_not_in'] = isset($data['process_definition_key_not_in']) ? $data['process_definition_key_not_in'] : null;
        $this->container['process_instance_business_key'] = isset($data['process_instance_business_key']) ? $data['process_instance_business_key'] : null;
        $this->container['process_instance_business_key_like'] = isset($data['process_instance_business_key_like']) ? $data['process_instance_business_key_like'] : null;
        $this->container['root_process_instances'] = isset($data['root_process_instances']) ? $data['root_process_instances'] : null;
        $this->container['finished'] = isset($data['finished']) ? $data['finished'] : false;
        $this->container['unfinished'] = isset($data['unfinished']) ? $data['unfinished'] : false;
        $this->container['with_incidents'] = isset($data['with_incidents']) ? $data['with_incidents'] : false;
        $this->container['with_root_incidents'] = isset($data['with_root_incidents']) ? $data['with_root_incidents'] : false;
        $this->container['incident_type'] = isset($data['incident_type']) ? $data['incident_type'] : null;
        $this->container['incident_status'] = isset($data['incident_status']) ? $data['incident_status'] : null;
        $this->container['incident_message'] = isset($data['incident_message']) ? $data['incident_message'] : null;
        $this->container['incident_message_like'] = isset($data['incident_message_like']) ? $data['incident_message_like'] : null;
        $this->container['started_before'] = isset($data['started_before']) ? $data['started_before'] : null;
        $this->container['started_after'] = isset($data['started_after']) ? $data['started_after'] : null;
        $this->container['finished_before'] = isset($data['finished_before']) ? $data['finished_before'] : null;
        $this->container['finished_after'] = isset($data['finished_after']) ? $data['finished_after'] : null;
        $this->container['executed_activity_after'] = isset($data['executed_activity_after']) ? $data['executed_activity_after'] : null;
        $this->container['executed_activity_before'] = isset($data['executed_activity_before']) ? $data['executed_activity_before'] : null;
        $this->container['executed_job_after'] = isset($data['executed_job_after']) ? $data['executed_job_after'] : null;
        $this->container['executed_job_before'] = isset($data['executed_job_before']) ? $data['executed_job_before'] : null;
        $this->container['started_by'] = isset($data['started_by']) ? $data['started_by'] : null;
        $this->container['super_process_instance_id'] = isset($data['super_process_instance_id']) ? $data['super_process_instance_id'] : null;
        $this->container['sub_process_instance_id'] = isset($data['sub_process_instance_id']) ? $data['sub_process_instance_id'] : null;
        $this->container['super_case_instance_id'] = isset($data['super_case_instance_id']) ? $data['super_case_instance_id'] : null;
        $this->container['sub_case_instance_id'] = isset($data['sub_case_instance_id']) ? $data['sub_case_instance_id'] : null;
        $this->container['case_instance_id'] = isset($data['case_instance_id']) ? $data['case_instance_id'] : null;
        $this->container['tenant_id_in'] = isset($data['tenant_id_in']) ? $data['tenant_id_in'] : null;
        $this->container['without_tenant_id'] = isset($data['without_tenant_id']) ? $data['without_tenant_id'] : null;
        $this->container['executed_activity_id_in'] = isset($data['executed_activity_id_in']) ? $data['executed_activity_id_in'] : null;
        $this->container['active_activity_id_in'] = isset($data['active_activity_id_in']) ? $data['active_activity_id_in'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['suspended'] = isset($data['suspended']) ? $data['suspended'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['externally_terminated'] = isset($data['externally_terminated']) ? $data['externally_terminated'] : null;
        $this->container['internally_terminated'] = isset($data['internally_terminated']) ? $data['internally_terminated'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
        $this->container['variable_names_ignore_case'] = isset($data['variable_names_ignore_case']) ? $data['variable_names_ignore_case'] : null;
        $this->container['variable_values_ignore_case'] = isset($data['variable_values_ignore_case']) ? $data['variable_values_ignore_case'] : null;
        $this->container['or_queries'] = isset($data['or_queries']) ? $data['or_queries'] : null;
        $this->container['sorting'] = isset($data['sorting']) ? $data['sorting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getIncidentStatusAllowableValues();
        if (!is_null($this->container['incident_status']) && !in_array($this->container['incident_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'incident_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets process_instance_id
     *
     * @return string|null
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string|null $process_instance_id Filter by process instance id.
     *
     * @return $this
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets process_instance_ids
     *
     * @return string[]|null
     */
    public function getProcessInstanceIds()
    {
        return $this->container['process_instance_ids'];
    }

    /**
     * Sets process_instance_ids
     *
     * @param string[]|null $process_instance_ids Filter by process instance ids. Must be a JSON array process instance ids.
     *
     * @return $this
     */
    public function setProcessInstanceIds($process_instance_ids)
    {
        $this->container['process_instance_ids'] = $process_instance_ids;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string|null
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string|null $process_definition_id Filter by the process definition the instances run on.
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string|null
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string|null $process_definition_key Filter by the key of the process definition the instances run on.
     *
     * @return $this
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets process_definition_key_in
     *
     * @return string[]|null
     */
    public function getProcessDefinitionKeyIn()
    {
        return $this->container['process_definition_key_in'];
    }

    /**
     * Sets process_definition_key_in
     *
     * @param string[]|null $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of Strings.
     *
     * @return $this
     */
    public function setProcessDefinitionKeyIn($process_definition_key_in)
    {
        $this->container['process_definition_key_in'] = $process_definition_key_in;

        return $this;
    }

    /**
     * Gets process_definition_name
     *
     * @return string|null
     */
    public function getProcessDefinitionName()
    {
        return $this->container['process_definition_name'];
    }

    /**
     * Sets process_definition_name
     *
     * @param string|null $process_definition_name Filter by the name of the process definition the instances run on.
     *
     * @return $this
     */
    public function setProcessDefinitionName($process_definition_name)
    {
        $this->container['process_definition_name'] = $process_definition_name;

        return $this;
    }

    /**
     * Gets process_definition_name_like
     *
     * @return string|null
     */
    public function getProcessDefinitionNameLike()
    {
        return $this->container['process_definition_name_like'];
    }

    /**
     * Sets process_definition_name_like
     *
     * @param string|null $process_definition_name_like Filter by process definition names that the parameter is a substring of.
     *
     * @return $this
     */
    public function setProcessDefinitionNameLike($process_definition_name_like)
    {
        $this->container['process_definition_name_like'] = $process_definition_name_like;

        return $this;
    }

    /**
     * Gets process_definition_key_not_in
     *
     * @return string[]|null
     */
    public function getProcessDefinitionKeyNotIn()
    {
        return $this->container['process_definition_key_not_in'];
    }

    /**
     * Sets process_definition_key_not_in
     *
     * @param string[]|null $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Must be a JSON array of process definition keys.
     *
     * @return $this
     */
    public function setProcessDefinitionKeyNotIn($process_definition_key_not_in)
    {
        $this->container['process_definition_key_not_in'] = $process_definition_key_not_in;

        return $this;
    }

    /**
     * Gets process_instance_business_key
     *
     * @return string|null
     */
    public function getProcessInstanceBusinessKey()
    {
        return $this->container['process_instance_business_key'];
    }

    /**
     * Sets process_instance_business_key
     *
     * @param string|null $process_instance_business_key Filter by process instance business key.
     *
     * @return $this
     */
    public function setProcessInstanceBusinessKey($process_instance_business_key)
    {
        $this->container['process_instance_business_key'] = $process_instance_business_key;

        return $this;
    }

    /**
     * Gets process_instance_business_key_like
     *
     * @return string|null
     */
    public function getProcessInstanceBusinessKeyLike()
    {
        return $this->container['process_instance_business_key_like'];
    }

    /**
     * Sets process_instance_business_key_like
     *
     * @param string|null $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of.
     *
     * @return $this
     */
    public function setProcessInstanceBusinessKeyLike($process_instance_business_key_like)
    {
        $this->container['process_instance_business_key_like'] = $process_instance_business_key_like;

        return $this;
    }

    /**
     * Gets root_process_instances
     *
     * @return bool|null
     */
    public function getRootProcessInstances()
    {
        return $this->container['root_process_instances'];
    }

    /**
     * Sets root_process_instances
     *
     * @param bool|null $root_process_instances Restrict the query to all process instances that are top level process instances.
     *
     * @return $this
     */
    public function setRootProcessInstances($root_process_instances)
    {
        $this->container['root_process_instances'] = $root_process_instances;

        return $this;
    }

    /**
     * Gets finished
     *
     * @return bool|null
     */
    public function getFinished()
    {
        return $this->container['finished'];
    }

    /**
     * Sets finished
     *
     * @param bool|null $finished Only include finished process instances. Value may only be true, as false is the default behavior.
     *
     * @return $this
     */
    public function setFinished($finished)
    {
        $this->container['finished'] = $finished;

        return $this;
    }

    /**
     * Gets unfinished
     *
     * @return bool|null
     */
    public function getUnfinished()
    {
        return $this->container['unfinished'];
    }

    /**
     * Sets unfinished
     *
     * @param bool|null $unfinished Only include unfinished process instances. Value may only be true, as false is the default behavior.
     *
     * @return $this
     */
    public function setUnfinished($unfinished)
    {
        $this->container['unfinished'] = $unfinished;

        return $this;
    }

    /**
     * Gets with_incidents
     *
     * @return bool|null
     */
    public function getWithIncidents()
    {
        return $this->container['with_incidents'];
    }

    /**
     * Sets with_incidents
     *
     * @param bool|null $with_incidents Only include process instances which have an incident. Value may only be true, as false is the default behavior.
     *
     * @return $this
     */
    public function setWithIncidents($with_incidents)
    {
        $this->container['with_incidents'] = $with_incidents;

        return $this;
    }

    /**
     * Gets with_root_incidents
     *
     * @return bool|null
     */
    public function getWithRootIncidents()
    {
        return $this->container['with_root_incidents'];
    }

    /**
     * Sets with_root_incidents
     *
     * @param bool|null $with_root_incidents Only include process instances which have a root incident. Value may only be true, as false is the default behavior.
     *
     * @return $this
     */
    public function setWithRootIncidents($with_root_incidents)
    {
        $this->container['with_root_incidents'] = $with_root_incidents;

        return $this;
    }

    /**
     * Gets incident_type
     *
     * @return string|null
     */
    public function getIncidentType()
    {
        return $this->container['incident_type'];
    }

    /**
     * Sets incident_type
     *
     * @param string|null $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     *
     * @return $this
     */
    public function setIncidentType($incident_type)
    {
        $this->container['incident_type'] = $incident_type;

        return $this;
    }

    /**
     * Gets incident_status
     *
     * @return string|null
     */
    public function getIncidentStatus()
    {
        return $this->container['incident_status'];
    }

    /**
     * Sets incident_status
     *
     * @param string|null $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
     *
     * @return $this
     */
    public function setIncidentStatus($incident_status)
    {
        $allowedValues = $this->getIncidentStatusAllowableValues();
        if (!is_null($incident_status) && !in_array($incident_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'incident_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['incident_status'] = $incident_status;

        return $this;
    }

    /**
     * Gets incident_message
     *
     * @return string|null
     */
    public function getIncidentMessage()
    {
        return $this->container['incident_message'];
    }

    /**
     * Sets incident_message
     *
     * @param string|null $incident_message Filter by the incident message. Exact match.
     *
     * @return $this
     */
    public function setIncidentMessage($incident_message)
    {
        $this->container['incident_message'] = $incident_message;

        return $this;
    }

    /**
     * Gets incident_message_like
     *
     * @return string|null
     */
    public function getIncidentMessageLike()
    {
        return $this->container['incident_message_like'];
    }

    /**
     * Sets incident_message_like
     *
     * @param string|null $incident_message_like Filter by the incident message that the parameter is a substring of.
     *
     * @return $this
     */
    public function setIncidentMessageLike($incident_message_like)
    {
        $this->container['incident_message_like'] = $incident_message_like;

        return $this;
    }

    /**
     * Gets started_before
     *
     * @return \DateTime|null
     */
    public function getStartedBefore()
    {
        return $this->container['started_before'];
    }

    /**
     * Sets started_before
     *
     * @param \DateTime|null $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     *
     * @return $this
     */
    public function setStartedBefore($started_before)
    {
        $this->container['started_before'] = $started_before;

        return $this;
    }

    /**
     * Gets started_after
     *
     * @return \DateTime|null
     */
    public function getStartedAfter()
    {
        return $this->container['started_after'];
    }

    /**
     * Sets started_after
     *
     * @param \DateTime|null $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     *
     * @return $this
     */
    public function setStartedAfter($started_after)
    {
        $this->container['started_after'] = $started_after;

        return $this;
    }

    /**
     * Gets finished_before
     *
     * @return \DateTime|null
     */
    public function getFinishedBefore()
    {
        return $this->container['finished_before'];
    }

    /**
     * Sets finished_before
     *
     * @param \DateTime|null $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     *
     * @return $this
     */
    public function setFinishedBefore($finished_before)
    {
        $this->container['finished_before'] = $finished_before;

        return $this;
    }

    /**
     * Gets finished_after
     *
     * @return \DateTime|null
     */
    public function getFinishedAfter()
    {
        return $this->container['finished_after'];
    }

    /**
     * Sets finished_after
     *
     * @param \DateTime|null $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     *
     * @return $this
     */
    public function setFinishedAfter($finished_after)
    {
        $this->container['finished_after'] = $finished_after;

        return $this;
    }

    /**
     * Gets executed_activity_after
     *
     * @return \DateTime|null
     */
    public function getExecutedActivityAfter()
    {
        return $this->container['executed_activity_after'];
    }

    /**
     * Sets executed_activity_after
     *
     * @param \DateTime|null $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     *
     * @return $this
     */
    public function setExecutedActivityAfter($executed_activity_after)
    {
        $this->container['executed_activity_after'] = $executed_activity_after;

        return $this;
    }

    /**
     * Gets executed_activity_before
     *
     * @return \DateTime|null
     */
    public function getExecutedActivityBefore()
    {
        return $this->container['executed_activity_before'];
    }

    /**
     * Sets executed_activity_before
     *
     * @param \DateTime|null $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     *
     * @return $this
     */
    public function setExecutedActivityBefore($executed_activity_before)
    {
        $this->container['executed_activity_before'] = $executed_activity_before;

        return $this;
    }

    /**
     * Gets executed_job_after
     *
     * @return \DateTime|null
     */
    public function getExecutedJobAfter()
    {
        return $this->container['executed_job_after'];
    }

    /**
     * Sets executed_job_after
     *
     * @param \DateTime|null $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     *
     * @return $this
     */
    public function setExecutedJobAfter($executed_job_after)
    {
        $this->container['executed_job_after'] = $executed_job_after;

        return $this;
    }

    /**
     * Gets executed_job_before
     *
     * @return \DateTime|null
     */
    public function getExecutedJobBefore()
    {
        return $this->container['executed_job_before'];
    }

    /**
     * Sets executed_job_before
     *
     * @param \DateTime|null $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
     *
     * @return $this
     */
    public function setExecutedJobBefore($executed_job_before)
    {
        $this->container['executed_job_before'] = $executed_job_before;

        return $this;
    }

    /**
     * Gets started_by
     *
     * @return string|null
     */
    public function getStartedBy()
    {
        return $this->container['started_by'];
    }

    /**
     * Sets started_by
     *
     * @param string|null $started_by Only include process instances that were started by the given user.
     *
     * @return $this
     */
    public function setStartedBy($started_by)
    {
        $this->container['started_by'] = $started_by;

        return $this;
    }

    /**
     * Gets super_process_instance_id
     *
     * @return string|null
     */
    public function getSuperProcessInstanceId()
    {
        return $this->container['super_process_instance_id'];
    }

    /**
     * Sets super_process_instance_id
     *
     * @param string|null $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
     *
     * @return $this
     */
    public function setSuperProcessInstanceId($super_process_instance_id)
    {
        $this->container['super_process_instance_id'] = $super_process_instance_id;

        return $this;
    }

    /**
     * Gets sub_process_instance_id
     *
     * @return string|null
     */
    public function getSubProcessInstanceId()
    {
        return $this->container['sub_process_instance_id'];
    }

    /**
     * Sets sub_process_instance_id
     *
     * @param string|null $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id.
     *
     * @return $this
     */
    public function setSubProcessInstanceId($sub_process_instance_id)
    {
        $this->container['sub_process_instance_id'] = $sub_process_instance_id;

        return $this;
    }

    /**
     * Gets super_case_instance_id
     *
     * @return string|null
     */
    public function getSuperCaseInstanceId()
    {
        return $this->container['super_case_instance_id'];
    }

    /**
     * Sets super_case_instance_id
     *
     * @param string|null $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     *
     * @return $this
     */
    public function setSuperCaseInstanceId($super_case_instance_id)
    {
        $this->container['super_case_instance_id'] = $super_case_instance_id;

        return $this;
    }

    /**
     * Gets sub_case_instance_id
     *
     * @return string|null
     */
    public function getSubCaseInstanceId()
    {
        return $this->container['sub_case_instance_id'];
    }

    /**
     * Sets sub_case_instance_id
     *
     * @param string|null $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id.
     *
     * @return $this
     */
    public function setSubCaseInstanceId($sub_case_instance_id)
    {
        $this->container['sub_case_instance_id'] = $sub_case_instance_id;

        return $this;
    }

    /**
     * Gets case_instance_id
     *
     * @return string|null
     */
    public function getCaseInstanceId()
    {
        return $this->container['case_instance_id'];
    }

    /**
     * Sets case_instance_id
     *
     * @param string|null $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     *
     * @return $this
     */
    public function setCaseInstanceId($case_instance_id)
    {
        $this->container['case_instance_id'] = $case_instance_id;

        return $this;
    }

    /**
     * Gets tenant_id_in
     *
     * @return string[]|null
     */
    public function getTenantIdIn()
    {
        return $this->container['tenant_id_in'];
    }

    /**
     * Sets tenant_id_in
     *
     * @param string[]|null $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of Strings.
     *
     * @return $this
     */
    public function setTenantIdIn($tenant_id_in)
    {
        $this->container['tenant_id_in'] = $tenant_id_in;

        return $this;
    }

    /**
     * Gets without_tenant_id
     *
     * @return bool|null
     */
    public function getWithoutTenantId()
    {
        return $this->container['without_tenant_id'];
    }

    /**
     * Sets without_tenant_id
     *
     * @param bool|null $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be true, as false is the default behavior.
     *
     * @return $this
     */
    public function setWithoutTenantId($without_tenant_id)
    {
        $this->container['without_tenant_id'] = $without_tenant_id;

        return $this;
    }

    /**
     * Gets executed_activity_id_in
     *
     * @return string[]|null
     */
    public function getExecutedActivityIdIn()
    {
        return $this->container['executed_activity_id_in'];
    }

    /**
     * Sets executed_activity_id_in
     *
     * @param string[]|null $executed_activity_id_in Restrict to instances that executed an activity with one of given ids.
     *
     * @return $this
     */
    public function setExecutedActivityIdIn($executed_activity_id_in)
    {
        $this->container['executed_activity_id_in'] = $executed_activity_id_in;

        return $this;
    }

    /**
     * Gets active_activity_id_in
     *
     * @return string[]|null
     */
    public function getActiveActivityIdIn()
    {
        return $this->container['active_activity_id_in'];
    }

    /**
     * Sets active_activity_id_in
     *
     * @param string[]|null $active_activity_id_in Restrict to instances that have an active activity with one of given ids.
     *
     * @return $this
     */
    public function setActiveActivityIdIn($active_activity_id_in)
    {
        $this->container['active_activity_id_in'] = $active_activity_id_in;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active Restrict to instances that are active.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets suspended
     *
     * @return bool|null
     */
    public function getSuspended()
    {
        return $this->container['suspended'];
    }

    /**
     * Sets suspended
     *
     * @param bool|null $suspended Restrict to instances that are suspended.
     *
     * @return $this
     */
    public function setSuspended($suspended)
    {
        $this->container['suspended'] = $suspended;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool|null
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool|null $completed Restrict to instances that are completed.
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets externally_terminated
     *
     * @return bool|null
     */
    public function getExternallyTerminated()
    {
        return $this->container['externally_terminated'];
    }

    /**
     * Sets externally_terminated
     *
     * @param bool|null $externally_terminated Restrict to instances that are externallyTerminated.
     *
     * @return $this
     */
    public function setExternallyTerminated($externally_terminated)
    {
        $this->container['externally_terminated'] = $externally_terminated;

        return $this;
    }

    /**
     * Gets internally_terminated
     *
     * @return bool|null
     */
    public function getInternallyTerminated()
    {
        return $this->container['internally_terminated'];
    }

    /**
     * Sets internally_terminated
     *
     * @param bool|null $internally_terminated Restrict to instances that are internallyTerminated.
     *
     * @return $this
     */
    public function setInternallyTerminated($internally_terminated)
    {
        $this->container['internally_terminated'] = $internally_terminated;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return \StrehleDe\CamundaClient\Model\VariableQueryParameterDto[]|null
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param \StrehleDe\CamundaClient\Model\VariableQueryParameterDto[]|null $variables A JSON array to only include process instances that have/had variables with certain values. The array consists of objects with the three properties `name`, `operator` and `value`. `name` (String) is the variable name, `operator` (String) is the comparison operator to be used and `value` the variable value. `value` may be String, Number or Boolean. Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
     *
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }

    /**
     * Gets variable_names_ignore_case
     *
     * @return bool|null
     */
    public function getVariableNamesIgnoreCase()
    {
        return $this->container['variable_names_ignore_case'];
    }

    /**
     * Sets variable_names_ignore_case
     *
     * @param bool|null $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to true variableName and variablename are treated as equal.
     *
     * @return $this
     */
    public function setVariableNamesIgnoreCase($variable_names_ignore_case)
    {
        $this->container['variable_names_ignore_case'] = $variable_names_ignore_case;

        return $this;
    }

    /**
     * Gets variable_values_ignore_case
     *
     * @return bool|null
     */
    public function getVariableValuesIgnoreCase()
    {
        return $this->container['variable_values_ignore_case'];
    }

    /**
     * Sets variable_values_ignore_case
     *
     * @param bool|null $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to true variableValue and variablevalue are treated as equal.
     *
     * @return $this
     */
    public function setVariableValuesIgnoreCase($variable_values_ignore_case)
    {
        $this->container['variable_values_ignore_case'] = $variable_values_ignore_case;

        return $this;
    }

    /**
     * Gets or_queries
     *
     * @return \StrehleDe\CamundaClient\Model\HistoricProcessInstanceQueryDto[]|null
     */
    public function getOrQueries()
    {
        return $this->container['or_queries'];
    }

    /**
     * Sets or_queries
     *
     * @param \StrehleDe\CamundaClient\Model\HistoricProcessInstanceQueryDto[]|null $or_queries A JSON array of nested historic process instance queries with OR semantics. A process instance matches a nested query if it fulfills at least one of the query's predicates. With multiple nested queries, a process instance must fulfill at least one predicate of each query (Conjunctive Normal Form). All process instance query properties can be used except for: sorting See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
     *
     * @return $this
     */
    public function setOrQueries($or_queries)
    {
        $this->container['or_queries'] = $or_queries;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return \StrehleDe\CamundaClient\Model\HistoricProcessInstanceQueryDtoSorting[]|null
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \StrehleDe\CamundaClient\Model\HistoricProcessInstanceQueryDtoSorting[]|null $sorting Apply sorting of the result
     *
     * @return $this
     */
    public function setSorting($sorting)
    {
        $this->container['sorting'] = $sorting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


