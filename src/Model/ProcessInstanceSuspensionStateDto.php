<?php
/**
 * ProcessInstanceSuspensionStateDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  StrehleDe\CamundaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Camunda BPM REST API
 *
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace StrehleDe\CamundaClient\Model;

use \ArrayAccess;
use \StrehleDe\CamundaClient\ObjectSerializer;

/**
 * ProcessInstanceSuspensionStateDto Class Doc Comment
 *
 * @category Class
 * @package  StrehleDe\CamundaClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProcessInstanceSuspensionStateDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProcessInstanceSuspensionStateDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'suspended' => 'bool',
        'process_definition_id' => 'string',
        'process_definition_key' => 'string',
        'process_definition_tenant_id' => 'string',
        'process_definition_without_tenant_id' => 'bool',
        'process_instance_ids' => 'string[]',
        'process_instance_query' => '\StrehleDe\CamundaClient\Model\ProcessInstanceQueryDto',
        'historic_process_instance_query' => '\StrehleDe\CamundaClient\Model\HistoricProcessInstanceQueryDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'suspended' => null,
        'process_definition_id' => null,
        'process_definition_key' => null,
        'process_definition_tenant_id' => null,
        'process_definition_without_tenant_id' => null,
        'process_instance_ids' => null,
        'process_instance_query' => null,
        'historic_process_instance_query' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'suspended' => 'suspended',
        'process_definition_id' => 'processDefinitionId',
        'process_definition_key' => 'processDefinitionKey',
        'process_definition_tenant_id' => 'processDefinitionTenantId',
        'process_definition_without_tenant_id' => 'processDefinitionWithoutTenantId',
        'process_instance_ids' => 'processInstanceIds',
        'process_instance_query' => 'processInstanceQuery',
        'historic_process_instance_query' => 'historicProcessInstanceQuery'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'suspended' => 'setSuspended',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_definition_key' => 'setProcessDefinitionKey',
        'process_definition_tenant_id' => 'setProcessDefinitionTenantId',
        'process_definition_without_tenant_id' => 'setProcessDefinitionWithoutTenantId',
        'process_instance_ids' => 'setProcessInstanceIds',
        'process_instance_query' => 'setProcessInstanceQuery',
        'historic_process_instance_query' => 'setHistoricProcessInstanceQuery'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'suspended' => 'getSuspended',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_definition_key' => 'getProcessDefinitionKey',
        'process_definition_tenant_id' => 'getProcessDefinitionTenantId',
        'process_definition_without_tenant_id' => 'getProcessDefinitionWithoutTenantId',
        'process_instance_ids' => 'getProcessInstanceIds',
        'process_instance_query' => 'getProcessInstanceQuery',
        'historic_process_instance_query' => 'getHistoricProcessInstanceQuery'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['suspended'] = isset($data['suspended']) ? $data['suspended'] : null;
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['process_definition_key'] = isset($data['process_definition_key']) ? $data['process_definition_key'] : null;
        $this->container['process_definition_tenant_id'] = isset($data['process_definition_tenant_id']) ? $data['process_definition_tenant_id'] : null;
        $this->container['process_definition_without_tenant_id'] = isset($data['process_definition_without_tenant_id']) ? $data['process_definition_without_tenant_id'] : null;
        $this->container['process_instance_ids'] = isset($data['process_instance_ids']) ? $data['process_instance_ids'] : null;
        $this->container['process_instance_query'] = isset($data['process_instance_query']) ? $data['process_instance_query'] : null;
        $this->container['historic_process_instance_query'] = isset($data['historic_process_instance_query']) ? $data['historic_process_instance_query'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets suspended
     *
     * @return bool|null
     */
    public function getSuspended()
    {
        return $this->container['suspended'];
    }

    /**
     * Sets suspended
     *
     * @param bool|null $suspended A `Boolean` value which indicates whether to activate or suspend a given process instance. When the value is set to `true`, the given process instance will be suspended and when the value is set to `false`, the given process instance will be activated.
     *
     * @return $this
     */
    public function setSuspended($suspended)
    {
        $this->container['suspended'] = $suspended;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string|null
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string|null $process_definition_id The process definition id of the process instances to activate or suspend.  **Note**: This parameter can be used only with combination of `suspended`.
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string|null
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string|null $process_definition_key The process definition key of the process instances to activate or suspend.  **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionTenantId`, and `processDefinitionWithoutTenantId`.
     *
     * @return $this
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets process_definition_tenant_id
     *
     * @return string|null
     */
    public function getProcessDefinitionTenantId()
    {
        return $this->container['process_definition_tenant_id'];
    }

    /**
     * Sets process_definition_tenant_id
     *
     * @param string|null $process_definition_tenant_id Only activate or suspend process instances of a process definition which belongs to a tenant with the given id.  **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionWithoutTenantId`.
     *
     * @return $this
     */
    public function setProcessDefinitionTenantId($process_definition_tenant_id)
    {
        $this->container['process_definition_tenant_id'] = $process_definition_tenant_id;

        return $this;
    }

    /**
     * Gets process_definition_without_tenant_id
     *
     * @return bool|null
     */
    public function getProcessDefinitionWithoutTenantId()
    {
        return $this->container['process_definition_without_tenant_id'];
    }

    /**
     * Sets process_definition_without_tenant_id
     *
     * @param bool|null $process_definition_without_tenant_id Only activate or suspend process instances of a process definition which belongs to no tenant. Value may only be true, as false is the default behavior.  **Note**: This parameter can be used only with combination of `suspended`, `processDefinitionKey`, and `processDefinitionTenantId`.
     *
     * @return $this
     */
    public function setProcessDefinitionWithoutTenantId($process_definition_without_tenant_id)
    {
        $this->container['process_definition_without_tenant_id'] = $process_definition_without_tenant_id;

        return $this;
    }

    /**
     * Gets process_instance_ids
     *
     * @return string[]|null
     */
    public function getProcessInstanceIds()
    {
        return $this->container['process_instance_ids'];
    }

    /**
     * Sets process_instance_ids
     *
     * @param string[]|null $process_instance_ids A list of process instance ids which defines a group of process instances which will be activated or suspended by the operation.  **Note**: This parameter can be used only with combination of `suspended`, `processInstanceQuery`, and `historicProcessInstanceQuery`.
     *
     * @return $this
     */
    public function setProcessInstanceIds($process_instance_ids)
    {
        $this->container['process_instance_ids'] = $process_instance_ids;

        return $this;
    }

    /**
     * Gets process_instance_query
     *
     * @return \StrehleDe\CamundaClient\Model\ProcessInstanceQueryDto|null
     */
    public function getProcessInstanceQuery()
    {
        return $this->container['process_instance_query'];
    }

    /**
     * Sets process_instance_query
     *
     * @param \StrehleDe\CamundaClient\Model\ProcessInstanceQueryDto|null $process_instance_query process_instance_query
     *
     * @return $this
     */
    public function setProcessInstanceQuery($process_instance_query)
    {
        $this->container['process_instance_query'] = $process_instance_query;

        return $this;
    }

    /**
     * Gets historic_process_instance_query
     *
     * @return \StrehleDe\CamundaClient\Model\HistoricProcessInstanceQueryDto|null
     */
    public function getHistoricProcessInstanceQuery()
    {
        return $this->container['historic_process_instance_query'];
    }

    /**
     * Sets historic_process_instance_query
     *
     * @param \StrehleDe\CamundaClient\Model\HistoricProcessInstanceQueryDto|null $historic_process_instance_query historic_process_instance_query
     *
     * @return $this
     */
    public function setHistoricProcessInstanceQuery($historic_process_instance_query)
    {
        $this->container['historic_process_instance_query'] = $historic_process_instance_query;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


